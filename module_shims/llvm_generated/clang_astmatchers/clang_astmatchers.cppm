module;
#include "clang_astmatchers.hpp"
export module clang.ASTMatchers;

export {
namespace clang {
using ::clang::ASTContext;
namespace ast_matchers {
using ::clang::ast_matchers::BoundNodes;
namespace internal {
using ::clang::ast_matchers::internal::TypeList;
using ::clang::ast_matchers::internal::EmptyTypeList;
using ::clang::ast_matchers::internal::TypeListContainsSuperOf;
using ::clang::ast_matchers::internal::VariadicFunction;
using ::clang::ast_matchers::internal::getUnderlyingType;
using ::clang::ast_matchers::internal::GetTypeSourceInfo;
using ::clang::ast_matchers::internal::getFunctionProtoType;
using ::clang::ast_matchers::internal::getAccessSpecifier;
using ::clang::ast_matchers::internal::BoundNodesMap;
using ::clang::ast_matchers::internal::BoundNodesTreeBuilder;
using ::clang::ast_matchers::internal::ASTMatchFinder;
using ::clang::ast_matchers::internal::DynMatcherInterface;
using ::clang::ast_matchers::internal::MatcherInterface;
using ::clang::ast_matchers::internal::SingleNodeMatcherInterface;
using ::clang::ast_matchers::internal::Matcher;
using ::clang::ast_matchers::internal::DynTypedMatcher;
using ::clang::ast_matchers::internal::makeMatcher;
using ::clang::ast_matchers::internal::ASTChildrenNotSpelledInSourceScope;
using ::clang::ast_matchers::internal::matchesFirstInRange;
using ::clang::ast_matchers::internal::matchesFirstInPointerRange;
using ::clang::ast_matchers::internal::isDefaultedHelper;
using ::clang::ast_matchers::internal::has_getDecl;
using ::clang::ast_matchers::internal::HasOverloadedOperatorNameMatcher;
using ::clang::ast_matchers::internal::HasNameMatcher;
using ::clang::ast_matchers::internal::hasAnyNameFunc;
using ::clang::ast_matchers::internal::hasAnySelectorFunc;
using ::clang::ast_matchers::internal::HasDeclarationMatcher;
using ::clang::ast_matchers::internal::IsBaseType;
using ::clang::ast_matchers::internal::AllNodeBaseTypes;
using ::clang::ast_matchers::internal::ExtractFunctionArgMeta;
using ::clang::ast_matchers::internal::new_from_tuple_impl;
using ::clang::ast_matchers::internal::new_from_tuple;
using ::clang::ast_matchers::internal::AdaptativeDefaultFromTypes;
using ::clang::ast_matchers::internal::AdaptativeDefaultToTypes;
using ::clang::ast_matchers::internal::HasDeclarationSupportedTypes;
using ::clang::ast_matchers::internal::BindableMatcher;
using ::clang::ast_matchers::internal::TrueMatcher;
using ::clang::ast_matchers::internal::makeAllOfComposite;
using ::clang::ast_matchers::internal::makeDynCastAllOfComposite;
using ::clang::ast_matchers::internal::VariadicDynCastAllOfMatcher;
using ::clang::ast_matchers::internal::VariadicAllOfMatcher;
using ::clang::ast_matchers::internal::VariadicOperatorMatcher;
using ::clang::ast_matchers::internal::VariadicOperatorMatcherFunc;
using ::clang::ast_matchers::internal::GetCladeImpl;
using ::clang::ast_matchers::internal::GetClade;
using ::clang::ast_matchers::internal::MapAnyOfMatcherImpl;
using ::clang::ast_matchers::internal::MapAnyOfMatcher;
using ::clang::ast_matchers::internal::MapAnyOfHelper;
using ::clang::ast_matchers::internal::ArgumentAdaptingMatcherFuncAdaptor;
using ::clang::ast_matchers::internal::ArgumentAdaptingMatcherFunc;
using ::clang::ast_matchers::internal::TraversalMatcher;
using ::clang::ast_matchers::internal::TraversalWrapper;
using ::clang::ast_matchers::internal::PolymorphicMatcher;
using ::clang::ast_matchers::internal::HasMatcher;
using ::clang::ast_matchers::internal::ForEachMatcher;
using ::clang::ast_matchers::internal::HasDescendantMatcher;
using ::clang::ast_matchers::internal::HasParentMatcher;
using ::clang::ast_matchers::internal::HasAncestorMatcher;
using ::clang::ast_matchers::internal::ForEachDescendantMatcher;
using ::clang::ast_matchers::internal::ValueEqualsMatcher;
using ::clang::ast_matchers::internal::LocMatcher;
using ::clang::ast_matchers::internal::TypeLocTypeMatcher;
using ::clang::ast_matchers::internal::TypeTraverseMatcher;
using ::clang::ast_matchers::internal::TypeLocTraverseMatcher;
using ::clang::ast_matchers::internal::TypeTraversePolymorphicMatcher;
using ::clang::ast_matchers::internal::MemoizedMatcher;
using ::clang::ast_matchers::internal::getTemplateSpecializationArgs;
using ::clang::ast_matchers::internal::NotEqualsBoundNodePredicate;
using ::clang::ast_matchers::internal::GetBodyMatcher;
using ::clang::ast_matchers::internal::equivalentBinaryOperator;
using ::clang::ast_matchers::internal::equivalentUnaryOperator;
using ::clang::ast_matchers::internal::getLHS;
using ::clang::ast_matchers::internal::getRHS;
using ::clang::ast_matchers::internal::getSubExpr;
using ::clang::ast_matchers::internal::HasSizeMatcher;
using ::clang::ast_matchers::internal::GetSourceExpressionMatcher;
using ::clang::ast_matchers::internal::CompoundStmtMatcher;
using ::clang::ast_matchers::internal::getExpansionLocOfMacro;
using ::clang::ast_matchers::internal::getOpName;
using ::clang::ast_matchers::internal::HasAnyOperatorNameMatcher;
using ::clang::ast_matchers::internal::HasOpNameMatcher;
using ::clang::ast_matchers::internal::hasAnyOperatorNameFunc;
using ::clang::ast_matchers::internal::HasOverloadOpNameMatcher;
using ::clang::ast_matchers::internal::hasAnyOverloadedOperatorNameFunc;
using ::clang::ast_matchers::internal::matchesAnyBase;
using ::clang::ast_matchers::internal::createAndVerifyRegex;
using ::clang::ast_matchers::internal::MatchTemplateArgLocAt;
using ::clang::ast_matchers::internal::CollectMatchesCallback;
} // namespace internal
using ::clang::ast_matchers::DeclarationMatcher;
using ::clang::ast_matchers::StatementMatcher;
using ::clang::ast_matchers::TypeMatcher;
using ::clang::ast_matchers::TypeLocMatcher;
using ::clang::ast_matchers::NestedNameSpecifierMatcher;
using ::clang::ast_matchers::NestedNameSpecifierLocMatcher;
using ::clang::ast_matchers::CXXBaseSpecifierMatcher;
using ::clang::ast_matchers::CXXCtorInitializerMatcher;
using ::clang::ast_matchers::TemplateArgumentMatcher;
using ::clang::ast_matchers::TemplateArgumentLocMatcher;
using ::clang::ast_matchers::LambdaCaptureMatcher;
using ::clang::ast_matchers::AttrMatcher;
using ::clang::ast_matchers::anything;
using ::clang::ast_matchers::translationUnitDecl;
using ::clang::ast_matchers::typedefDecl;
using ::clang::ast_matchers::typedefNameDecl;
using ::clang::ast_matchers::typeAliasDecl;
using ::clang::ast_matchers::typeAliasTemplateDecl;
using ::clang::ast_matchers::decl;
using ::clang::ast_matchers::decompositionDecl;
using ::clang::ast_matchers::bindingDecl;
using ::clang::ast_matchers::linkageSpecDecl;
using ::clang::ast_matchers::namedDecl;
using ::clang::ast_matchers::labelDecl;
using ::clang::ast_matchers::namespaceDecl;
using ::clang::ast_matchers::namespaceAliasDecl;
using ::clang::ast_matchers::recordDecl;
using ::clang::ast_matchers::cxxRecordDecl;
using ::clang::ast_matchers::classTemplateDecl;
using ::clang::ast_matchers::classTemplateSpecializationDecl;
using ::clang::ast_matchers::classTemplatePartialSpecializationDecl;
using ::clang::ast_matchers::declaratorDecl;
using ::clang::ast_matchers::parmVarDecl;
using ::clang::ast_matchers::accessSpecDecl;
using ::clang::ast_matchers::cxxBaseSpecifier;
using ::clang::ast_matchers::cxxCtorInitializer;
using ::clang::ast_matchers::templateArgument;
using ::clang::ast_matchers::templateArgumentLoc;
using ::clang::ast_matchers::templateName;
using ::clang::ast_matchers::nonTypeTemplateParmDecl;
using ::clang::ast_matchers::templateTypeParmDecl;
using ::clang::ast_matchers::templateTemplateParmDecl;
using ::clang::ast_matchers::traverse;
using ::clang::ast_matchers::autoreleasePoolStmt;
using ::clang::ast_matchers::valueDecl;
using ::clang::ast_matchers::cxxConstructorDecl;
using ::clang::ast_matchers::cxxDestructorDecl;
using ::clang::ast_matchers::enumDecl;
using ::clang::ast_matchers::enumConstantDecl;
using ::clang::ast_matchers::tagDecl;
using ::clang::ast_matchers::cxxMethodDecl;
using ::clang::ast_matchers::cxxConversionDecl;
using ::clang::ast_matchers::cxxDeductionGuideDecl;
using ::clang::ast_matchers::conceptDecl;
using ::clang::ast_matchers::varDecl;
using ::clang::ast_matchers::fieldDecl;
using ::clang::ast_matchers::indirectFieldDecl;
using ::clang::ast_matchers::functionDecl;
using ::clang::ast_matchers::functionTemplateDecl;
using ::clang::ast_matchers::friendDecl;
using ::clang::ast_matchers::stmt;
using ::clang::ast_matchers::declStmt;
using ::clang::ast_matchers::memberExpr;
using ::clang::ast_matchers::unresolvedMemberExpr;
using ::clang::ast_matchers::cxxDependentScopeMemberExpr;
using ::clang::ast_matchers::callExpr;
using ::clang::ast_matchers::lambdaExpr;
using ::clang::ast_matchers::cxxMemberCallExpr;
using ::clang::ast_matchers::objcMessageExpr;
using ::clang::ast_matchers::objcStringLiteral;
using ::clang::ast_matchers::objcInterfaceDecl;
using ::clang::ast_matchers::objcImplementationDecl;
using ::clang::ast_matchers::objcProtocolDecl;
using ::clang::ast_matchers::objcCategoryDecl;
using ::clang::ast_matchers::objcCategoryImplDecl;
using ::clang::ast_matchers::objcMethodDecl;
using ::clang::ast_matchers::blockDecl;
using ::clang::ast_matchers::objcIvarDecl;
using ::clang::ast_matchers::objcPropertyDecl;
using ::clang::ast_matchers::objcThrowStmt;
using ::clang::ast_matchers::objcTryStmt;
using ::clang::ast_matchers::objcCatchStmt;
using ::clang::ast_matchers::objcFinallyStmt;
using ::clang::ast_matchers::exprWithCleanups;
using ::clang::ast_matchers::initListExpr;
using ::clang::ast_matchers::cxxStdInitializerListExpr;
using ::clang::ast_matchers::implicitValueInitExpr;
using ::clang::ast_matchers::parenListExpr;
using ::clang::ast_matchers::substNonTypeTemplateParmExpr;
using ::clang::ast_matchers::usingDecl;
using ::clang::ast_matchers::usingEnumDecl;
using ::clang::ast_matchers::usingDirectiveDecl;
using ::clang::ast_matchers::unresolvedLookupExpr;
using ::clang::ast_matchers::unresolvedUsingValueDecl;
using ::clang::ast_matchers::unresolvedUsingTypenameDecl;
using ::clang::ast_matchers::constantExpr;
using ::clang::ast_matchers::parenExpr;
using ::clang::ast_matchers::cxxConstructExpr;
using ::clang::ast_matchers::cxxUnresolvedConstructExpr;
using ::clang::ast_matchers::cxxThisExpr;
using ::clang::ast_matchers::cxxBindTemporaryExpr;
using ::clang::ast_matchers::materializeTemporaryExpr;
using ::clang::ast_matchers::cxxNewExpr;
using ::clang::ast_matchers::cxxDeleteExpr;
using ::clang::ast_matchers::cxxNoexceptExpr;
using ::clang::ast_matchers::arrayInitLoopExpr;
using ::clang::ast_matchers::arrayInitIndexExpr;
using ::clang::ast_matchers::arraySubscriptExpr;
using ::clang::ast_matchers::cxxDefaultArgExpr;
using ::clang::ast_matchers::cxxOperatorCallExpr;
using ::clang::ast_matchers::cxxRewrittenBinaryOperator;
using ::clang::ast_matchers::expr;
using ::clang::ast_matchers::declRefExpr;
using ::clang::ast_matchers::objcIvarRefExpr;
using ::clang::ast_matchers::blockExpr;
using ::clang::ast_matchers::ifStmt;
using ::clang::ast_matchers::forStmt;
using ::clang::ast_matchers::cxxForRangeStmt;
using ::clang::ast_matchers::whileStmt;
using ::clang::ast_matchers::doStmt;
using ::clang::ast_matchers::breakStmt;
using ::clang::ast_matchers::continueStmt;
using ::clang::ast_matchers::coreturnStmt;
using ::clang::ast_matchers::returnStmt;
using ::clang::ast_matchers::gotoStmt;
using ::clang::ast_matchers::labelStmt;
using ::clang::ast_matchers::addrLabelExpr;
using ::clang::ast_matchers::switchStmt;
using ::clang::ast_matchers::switchCase;
using ::clang::ast_matchers::caseStmt;
using ::clang::ast_matchers::defaultStmt;
using ::clang::ast_matchers::compoundStmt;
using ::clang::ast_matchers::cxxCatchStmt;
using ::clang::ast_matchers::cxxTryStmt;
using ::clang::ast_matchers::cxxThrowExpr;
using ::clang::ast_matchers::nullStmt;
using ::clang::ast_matchers::asmStmt;
using ::clang::ast_matchers::cxxBoolLiteral;
using ::clang::ast_matchers::stringLiteral;
using ::clang::ast_matchers::characterLiteral;
using ::clang::ast_matchers::integerLiteral;
using ::clang::ast_matchers::floatLiteral;
using ::clang::ast_matchers::imaginaryLiteral;
using ::clang::ast_matchers::fixedPointLiteral;
using ::clang::ast_matchers::userDefinedLiteral;
using ::clang::ast_matchers::compoundLiteralExpr;
using ::clang::ast_matchers::coawaitExpr;
using ::clang::ast_matchers::dependentCoawaitExpr;
using ::clang::ast_matchers::coyieldExpr;
using ::clang::ast_matchers::coroutineBodyStmt;
using ::clang::ast_matchers::cxxNullPtrLiteralExpr;
using ::clang::ast_matchers::chooseExpr;
using ::clang::ast_matchers::gnuNullExpr;
using ::clang::ast_matchers::genericSelectionExpr;
using ::clang::ast_matchers::atomicExpr;
using ::clang::ast_matchers::stmtExpr;
using ::clang::ast_matchers::binaryOperator;
using ::clang::ast_matchers::unaryOperator;
using ::clang::ast_matchers::conditionalOperator;
using ::clang::ast_matchers::binaryConditionalOperator;
using ::clang::ast_matchers::opaqueValueExpr;
using ::clang::ast_matchers::staticAssertDecl;
using ::clang::ast_matchers::cxxReinterpretCastExpr;
using ::clang::ast_matchers::cxxStaticCastExpr;
using ::clang::ast_matchers::cxxDynamicCastExpr;
using ::clang::ast_matchers::cxxConstCastExpr;
using ::clang::ast_matchers::cStyleCastExpr;
using ::clang::ast_matchers::explicitCastExpr;
using ::clang::ast_matchers::implicitCastExpr;
using ::clang::ast_matchers::castExpr;
using ::clang::ast_matchers::cxxFunctionalCastExpr;
using ::clang::ast_matchers::cxxTemporaryObjectExpr;
using ::clang::ast_matchers::predefinedExpr;
using ::clang::ast_matchers::designatedInitExpr;
using ::clang::ast_matchers::qualType;
using ::clang::ast_matchers::type;
using ::clang::ast_matchers::typeLoc;
using ::clang::ast_matchers::eachOf;
using ::clang::ast_matchers::anyOf;
using ::clang::ast_matchers::allOf;
using ::clang::ast_matchers::optionally;
using ::clang::ast_matchers::unaryExprOrTypeTraitExpr;
using ::clang::ast_matchers::mapAnyOf;
using ::clang::ast_matchers::binaryOperation;
using ::clang::ast_matchers::invocation;
using ::clang::ast_matchers::alignOfExpr;
using ::clang::ast_matchers::sizeOfExpr;
using ::clang::ast_matchers::hasName;
using ::clang::ast_matchers::hasAnyName;
using ::clang::ast_matchers::hasOverloadedOperatorName;
using ::clang::ast_matchers::hasAnyOverloadedOperatorName;
using ::clang::ast_matchers::has;
using ::clang::ast_matchers::hasDescendant;
using ::clang::ast_matchers::forEach;
using ::clang::ast_matchers::forEachDescendant;
using ::clang::ast_matchers::findAll;
using ::clang::ast_matchers::hasParent;
using ::clang::ast_matchers::hasAncestor;
using ::clang::ast_matchers::unless;
using ::clang::ast_matchers::hasDeclaration;
using ::clang::ast_matchers::hasAnySelector;
using ::clang::ast_matchers::lambdaCapture;
using ::clang::ast_matchers::equals;
using ::clang::ast_matchers::hasAnyOperatorName;
using ::clang::ast_matchers::qualifiedTypeLoc;
using ::clang::ast_matchers::pointerTypeLoc;
using ::clang::ast_matchers::referenceTypeLoc;
using ::clang::ast_matchers::templateSpecializationTypeLoc;
using ::clang::ast_matchers::elaboratedTypeLoc;
using ::clang::ast_matchers::AstTypeMatcher;
using ::clang::ast_matchers::builtinType;
using ::clang::ast_matchers::arrayType;
using ::clang::ast_matchers::complexType;
using ::clang::ast_matchers::constantArrayType;
using ::clang::ast_matchers::dependentSizedArrayType;
using ::clang::ast_matchers::incompleteArrayType;
using ::clang::ast_matchers::variableArrayType;
using ::clang::ast_matchers::atomicType;
using ::clang::ast_matchers::autoType;
using ::clang::ast_matchers::decltypeType;
using ::clang::ast_matchers::functionType;
using ::clang::ast_matchers::functionProtoType;
using ::clang::ast_matchers::parenType;
using ::clang::ast_matchers::blockPointerType;
using ::clang::ast_matchers::memberPointerType;
using ::clang::ast_matchers::pointerType;
using ::clang::ast_matchers::objcObjectPointerType;
using ::clang::ast_matchers::referenceType;
using ::clang::ast_matchers::lValueReferenceType;
using ::clang::ast_matchers::rValueReferenceType;
using ::clang::ast_matchers::typedefType;
using ::clang::ast_matchers::enumType;
using ::clang::ast_matchers::templateSpecializationType;
using ::clang::ast_matchers::deducedTemplateSpecializationType;
using ::clang::ast_matchers::unaryTransformType;
using ::clang::ast_matchers::recordType;
using ::clang::ast_matchers::tagType;
using ::clang::ast_matchers::elaboratedType;
using ::clang::ast_matchers::usingType;
using ::clang::ast_matchers::substTemplateTypeParmType;
using ::clang::ast_matchers::templateTypeParmType;
using ::clang::ast_matchers::injectedClassNameType;
using ::clang::ast_matchers::decayedType;
using ::clang::ast_matchers::nestedNameSpecifier;
using ::clang::ast_matchers::nestedNameSpecifierLoc;
using ::clang::ast_matchers::attr;
using ::clang::ast_matchers::cudaKernelCallExpr;
using ::clang::ast_matchers::ompExecutableDirective;
using ::clang::ast_matchers::ompDefaultClause;
using ::clang::ast_matchers::MatchFinder;
using ::clang::ast_matchers::match;
using ::clang::ast_matchers::selectFirst;
using ::clang::ast_matchers::matchDynamic;
namespace dynamic {
using ::clang::ast_matchers::dynamic::ArgKind;
using ::clang::ast_matchers::dynamic::DynTypedMatcher;
using ::clang::ast_matchers::dynamic::VariantMatcher;
using ::clang::ast_matchers::dynamic::VariantValue;
using ::clang::ast_matchers::dynamic::SourceLocation;
using ::clang::ast_matchers::dynamic::SourceRange;
using ::clang::ast_matchers::dynamic::ParserValue;
using ::clang::ast_matchers::dynamic::Diagnostics;
namespace internal {
using ::clang::ast_matchers::dynamic::internal::MatcherDescriptor;
using ::clang::ast_matchers::dynamic::internal::MatcherDescriptorPtr;
} // namespace internal
using ::clang::ast_matchers::dynamic::MatcherCtor;
using ::clang::ast_matchers::dynamic::MatcherCompletion;
using ::clang::ast_matchers::dynamic::Registry;
using ::clang::ast_matchers::dynamic::Parser;
} // namespace dynamic
using ::clang::ast_matchers::GtestCmp;
using ::clang::ast_matchers::MockArgs;
using ::clang::ast_matchers::gtestAssert;
using ::clang::ast_matchers::gtestAssertThat;
using ::clang::ast_matchers::gtestExpect;
using ::clang::ast_matchers::gtestExpectThat;
using ::clang::ast_matchers::gtestExpectCall;
using ::clang::ast_matchers::gtestOnCall;
} // namespace ast_matchers
} // namespace clang
using ::Getter;
using ::MatcherImpl;
}
