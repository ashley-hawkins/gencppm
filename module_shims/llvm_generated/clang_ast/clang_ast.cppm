module;
#include "clang_ast.hpp"
export module clang.AST;

export {
namespace clang {
namespace serialization {
using ::clang::serialization::BasicReaderBase;
using ::clang::serialization::AbstractTypeReader;
using ::clang::serialization::AbstractTypeWriter;
using ::clang::serialization::makeNullableFromOptional;
using ::clang::serialization::makePointerFromOptional;
using ::clang::serialization::ReadDispatcher;
using ::clang::serialization::UnpackOptionalValue;
using ::clang::serialization::DataStreamBasicReader;
using ::clang::serialization::makeOptionalFromNullable;
using ::clang::serialization::makeOptionalFromPointer;
using ::clang::serialization::WriteDispatcher;
using ::clang::serialization::PackOptionalValue;
using ::clang::serialization::BasicWriterBase;
using ::clang::serialization::DataStreamBasicWriter;
} // namespace serialization
using ::clang::AddrLabelExpr;
using ::clang::ASTContext;
using ::clang::CharUnits;
using ::clang::CXXRecordDecl;
using ::clang::Decl;
using ::clang::DiagnosticBuilder;
using ::clang::Expr;
using ::clang::FieldDecl;
using ::clang::PrintingPolicy;
using ::clang::Type;
using ::clang::ValueDecl;
using ::clang::QualType;
using ::clang::TypeInfoLValue;
using ::clang::DynamicAllocLValue;
using ::clang::APValue;
using ::clang::Stmt;
using ::clang::CXXCtorInitializer;
using ::clang::OMPClause;
using ::clang::Attr;
using ::clang::ObjCProtocolLoc;
using ::clang::ExprDependenceScope;
using ::clang::ExprDependence;
using ::clang::TypeDependenceScope;
using ::clang::TypeDependence;
using ::clang::Dependence;
using ::clang::toExprDependence;
using ::clang::toExprDependenceForImpliedType;
using ::clang::toExprDependenceAsWritten;
using ::clang::turnTypeToValueDependence;
using ::clang::turnValueToTypeDependence;
using ::clang::toTypeDependence;
using ::clang::toSyntacticDependence;
using ::clang::toSemanticDependence;
using ::clang::toNestedNameSpecifierDependendence;
using ::clang::toTemplateArgumentDependence;
using ::clang::toTemplateNameDependence;
using ::clang::IdentifierInfo;
using ::clang::LangOptions;
using ::clang::NamespaceAliasDecl;
using ::clang::NamespaceDecl;
using ::clang::TypeLoc;
using ::clang::NestedNameSpecifier;
using ::clang::NestedNameSpecifierLoc;
using ::clang::NestedNameSpecifierLocBuilder;
using ::clang::DependentTemplateName;
using ::clang::NamedDecl;
using ::clang::OverloadedOperatorKind;
using ::clang::OverloadedTemplateStorage;
using ::clang::AssumedTemplateStorage;
using ::clang::QualifiedTemplateName;
using ::clang::SubstTemplateTemplateParmPackStorage;
using ::clang::SubstTemplateTemplateParmStorage;
using ::clang::TemplateArgument;
using ::clang::TemplateDecl;
using ::clang::TemplateTemplateParmDecl;
using ::clang::UsingShadowDecl;
using ::clang::UncommonTemplateNameStorage;
using ::clang::TemplateName;
using ::clang::BTFTypeTagAttr;
using ::clang::ExtQuals;
using ::clang::ConceptDecl;
using ::clang::TagDecl;
using ::clang::TemplateParameterList;
using ::clang::CanQual;
using ::clang::DeclContext;
using ::clang::EnumDecl;
using ::clang::ExtQualsTypeCommonBase;
using ::clang::FunctionDecl;
using ::clang::ObjCInterfaceDecl;
using ::clang::ObjCProtocolDecl;
using ::clang::ObjCTypeParamDecl;
using ::clang::RecordDecl;
using ::clang::TemplateArgumentListInfo;
using ::clang::TemplateArgumentLoc;
using ::clang::TemplateTypeParmDecl;
using ::clang::TypedefNameDecl;
using ::clang::UnresolvedUsingTypenameDecl;
using ::clang::CanQualType;
using ::clang::Qualifiers;
using ::clang::QualifiersAndAtomic;
using ::clang::SplitQualType;
using ::clang::ObjCSubstitutionContext;
using ::clang::TypeOfKind;
using ::clang::RefQualifierKind;
using ::clang::AutoTypeKeyword;
using ::clang::BuiltinType;
using ::clang::ComplexType;
using ::clang::ParenType;
using ::clang::PointerType;
using ::clang::AdjustedType;
using ::clang::DecayedType;
using ::clang::BlockPointerType;
using ::clang::ReferenceType;
using ::clang::LValueReferenceType;
using ::clang::RValueReferenceType;
using ::clang::MemberPointerType;
using ::clang::ArrayType;
using ::clang::ConstantArrayType;
using ::clang::IncompleteArrayType;
using ::clang::VariableArrayType;
using ::clang::DependentSizedArrayType;
using ::clang::DependentAddressSpaceType;
using ::clang::DependentSizedExtVectorType;
using ::clang::VectorType;
using ::clang::DependentVectorType;
using ::clang::ExtVectorType;
using ::clang::MatrixType;
using ::clang::ConstantMatrixType;
using ::clang::DependentSizedMatrixType;
using ::clang::FunctionType;
using ::clang::FunctionNoProtoType;
using ::clang::FunctionProtoType;
using ::clang::UnresolvedUsingType;
using ::clang::UsingType;
using ::clang::TypedefType;
using ::clang::MacroQualifiedType;
using ::clang::TypeOfExprType;
using ::clang::DependentTypeOfExprType;
using ::clang::TypeOfType;
using ::clang::DecltypeType;
using ::clang::DependentDecltypeType;
using ::clang::UnaryTransformType;
using ::clang::DependentUnaryTransformType;
using ::clang::TagType;
using ::clang::RecordType;
using ::clang::EnumType;
using ::clang::AttributedType;
using ::clang::BTFTagAttributedType;
using ::clang::TemplateTypeParmType;
using ::clang::SubstTemplateTypeParmType;
using ::clang::SubstTemplateTypeParmPackType;
using ::clang::DeducedType;
using ::clang::AutoType;
using ::clang::DeducedTemplateSpecializationType;
using ::clang::TemplateSpecializationType;
using ::clang::printTemplateArgumentList;
using ::clang::isSubstitutedDefaultArgument;
using ::clang::InjectedClassNameType;
using ::clang::TagTypeKind;
using ::clang::ElaboratedTypeKeyword;
using ::clang::TypeWithKeyword;
using ::clang::ElaboratedType;
using ::clang::DependentNameType;
using ::clang::DependentTemplateSpecializationType;
using ::clang::PackExpansionType;
using ::clang::ObjCProtocolQualifiers;
using ::clang::ObjCTypeParamType;
using ::clang::ObjCObjectType;
using ::clang::ObjCObjectTypeImpl;
using ::clang::ObjCInterfaceType;
using ::clang::ObjCObjectPointerType;
using ::clang::AtomicType;
using ::clang::PipeType;
using ::clang::BitIntType;
using ::clang::DependentBitIntType;
using ::clang::QualifierCollector;
using ::clang::TypeSourceInfo;
using ::clang::getFunctionExtInfo;
using ::clang::IsEnumDeclComplete;
using ::clang::IsEnumDeclScoped;
using ::clang::TypeIsArrayType;
using ::clang::FixedPointValueToString;
using ::clang::CanProxy;
using ::clang::CanProxyAdaptor;
using ::clang::CanProxyBase;
using ::clang::CanTypeIterator;
namespace comments {
using ::clang::comments::CommandInfo;
using ::clang::comments::CommandTraits;
using ::clang::comments::FullComment;
using ::clang::comments::CommandMarkerKind;
using ::clang::comments::Comment;
using ::clang::comments::InlineContentComment;
using ::clang::comments::TextComment;
using ::clang::comments::InlineCommandComment;
using ::clang::comments::HTMLTagComment;
using ::clang::comments::HTMLStartTagComment;
using ::clang::comments::HTMLEndTagComment;
using ::clang::comments::BlockContentComment;
using ::clang::comments::ParagraphComment;
using ::clang::comments::BlockCommandComment;
using ::clang::comments::ParamCommandComment;
using ::clang::comments::TParamCommandComment;
using ::clang::comments::VerbatimBlockLineComment;
using ::clang::comments::VerbatimBlockComment;
using ::clang::comments::VerbatimLineComment;
using ::clang::comments::DeclInfo;
using ::clang::comments::CommentVisitorBase;
using ::clang::comments::CommentVisitor;
using ::clang::comments::ConstCommentVisitor;
using ::clang::comments::Lexer;
using ::clang::comments::TextTokenRetokenizer;
namespace tok {
using ::clang::comments::tok::TokenKind;
} // namespace tok
using ::clang::comments::Token;
using ::clang::comments::BriefParser;
using ::clang::comments::Sema;
using ::clang::comments::Parser;
} // namespace comments
using ::clang::VarDecl;
using ::clang::Sema;
using ::clang::ComparisonCategoryType;
using ::clang::commonComparisonType;
using ::clang::getComparisonCategoryForBuiltinCmp;
using ::clang::ComparisonCategoryResult;
using ::clang::ComparisonCategoryInfo;
using ::clang::ComparisonCategories;
using ::clang::DeclAccessPair;
using ::clang::ASTDumpOutputFormat;
using ::clang::TerminalColor;
using ::clang::ColorScope;
using ::clang::AttrVec;
using ::clang::specific_attr_iterator;
using ::clang::specific_attr_begin;
using ::clang::specific_attr_end;
using ::clang::hasSpecificAttr;
using ::clang::getSpecificAttr;
using ::clang::DeclarationName;
using ::clang::DeclarationNameTable;
namespace detail {
using ::clang::detail::CXXSpecialNameExtra;
using ::clang::detail::CXXDeductionGuideNameExtra;
using ::clang::detail::CXXOperatorIdName;
using ::clang::detail::CXXLiteralOperatorIdName;
using ::clang::detail::IgnoreExprNodesImpl;
using ::clang::detail::has_same_member_pointer_type;
using ::clang::detail::isSameMethod;
} // namespace detail
using ::clang::DeclarationNameLoc;
using ::clang::DeclarationNameInfo;
using ::clang::ASTMutationListener;
using ::clang::BlockDecl;
using ::clang::ExternalSourceSymbolAttr;
using ::clang::Linkage;
using ::clang::LinkageSpecDecl;
using ::clang::Module;
using ::clang::ObjCContainerDecl;
using ::clang::ObjCMethodDecl;
using ::clang::SourceManager;
using ::clang::StoredDeclsMap;
using ::clang::TranslationUnitDecl;
using ::clang::UsingDirectiveDecl;
using ::clang::AvailabilityResult;
using ::clang::declaresSameEntity;
using ::clang::PrettyStackTraceDecl;
using ::clang::DeclListNode;
using ::clang::DeclContextLookupResult;
using ::clang::DeductionCandidate;
using ::clang::cast_convert_decl_context;
using ::clang::ASTConsumer;
using ::clang::ASTSourceDescriptor;
using ::clang::CXXBaseSpecifier;
using ::clang::Selector;
using ::clang::ExternalASTSource;
using ::clang::LazyOffsetPtr;
using ::clang::LazyGenerationalUpdatePtr;
using ::clang::LazyVector;
using ::clang::LazyDeclStmtPtr;
using ::clang::LazyDeclPtr;
using ::clang::LazyCXXCtorInitializersPtr;
using ::clang::LazyCXXBaseSpecifiersPtr;
using ::clang::Redeclarable;
using ::clang::getPrimaryMergedDecl;
using ::clang::Mergeable;
using ::clang::CanonicalDeclPtr;
using ::clang::ASTTemplateArgumentListInfo;
using ::clang::CompoundStmt;
using ::clang::DependentFunctionTemplateSpecializationInfo;
using ::clang::FunctionTemplateDecl;
using ::clang::FunctionTemplateSpecializationInfo;
using ::clang::FunctionTypeLoc;
using ::clang::LabelStmt;
using ::clang::MemberSpecializationInfo;
using ::clang::ParmVarDecl;
using ::clang::StringLiteral;
using ::clang::TemplateArgumentList;
using ::clang::TypeAliasTemplateDecl;
using ::clang::UnresolvedSetImpl;
using ::clang::VarTemplateDecl;
using ::clang::PragmaCommentDecl;
using ::clang::PragmaDetectMismatchDecl;
using ::clang::ExternCContextDecl;
using ::clang::LabelDecl;
using ::clang::QualifierInfo;
using ::clang::DeclaratorDecl;
using ::clang::EvaluatedStmt;
using ::clang::ImplicitParamDecl;
using ::clang::MultiVersionKind;
using ::clang::EnumConstantDecl;
using ::clang::IndirectFieldDecl;
using ::clang::TypeDecl;
using ::clang::TypedefDecl;
using ::clang::TypeAliasDecl;
using ::clang::FileScopeAsmDecl;
using ::clang::TopLevelStmtDecl;
using ::clang::CapturedDecl;
using ::clang::ImportDecl;
using ::clang::ExportDecl;
using ::clang::EmptyDecl;
using ::clang::HLSLBufferDecl;
using ::clang::PrinterHelper;
using ::clang::PrintingCallbacks;
using ::clang::ASTReader;
using ::clang::DiagnosticsEngine;
using ::clang::Preprocessor;
using ::clang::RawComment;
using ::clang::RawCommentList;
using ::clang::ASTRecordLayout;
using ::clang::AtomicExpr;
using ::clang::BlockExpr;
using ::clang::BuiltinTemplateDecl;
using ::clang::CXXABI;
using ::clang::CXXConstructorDecl;
using ::clang::CXXMethodDecl;
using ::clang::ParentMapContext;
using ::clang::DynTypedNodeList;
using ::clang::FloatModeKind;
using ::clang::GlobalDecl;
using ::clang::MangleContext;
using ::clang::MangleNumberingContext;
using ::clang::MSGuidDeclParts;
using ::clang::ObjCCategoryDecl;
using ::clang::ObjCCategoryImplDecl;
using ::clang::ObjCImplDecl;
using ::clang::ObjCImplementationDecl;
using ::clang::ObjCIvarDecl;
using ::clang::ObjCPropertyDecl;
using ::clang::ObjCPropertyImplDecl;
using ::clang::OMPTraitInfo;
using ::clang::ParsedTargetAttr;
using ::clang::TargetAttr;
using ::clang::TargetInfo;
using ::clang::TypeConstraint;
using ::clang::UnresolvedSetIterator;
using ::clang::VTableContextBase;
using ::clang::BlockVarCopyInit;
namespace Builtin {
using ::clang::Builtin::Context;
} // namespace Builtin
using ::clang::BuiltinTemplateKind;
using ::clang::OpenCLTypeKind;
namespace interp {
using ::clang::interp::Context;
} // namespace interp
using ::clang::AlignRequirementKind;
using ::clang::TypeInfo;
using ::clang::TypeInfoChars;
using ::clang::GetNullarySelector;
using ::clang::GetUnarySelector;
using ::clang::ASTVector;
using ::clang::UnresolvedSet;
using ::clang::ASTUnresolvedSet;
using ::clang::LazyASTUnresolvedSet;
using ::clang::FullExpr;
using ::clang::OpaqueValueExpr;
using ::clang::ParenExpr;
using ::clang::UnaryOperator;
using ::clang::UnaryExprOrTypeTraitExpr;
using ::clang::ArraySubscriptExpr;
using ::clang::MatrixSubscriptExpr;
using ::clang::CompoundLiteralExpr;
using ::clang::ImplicitCastExpr;
using ::clang::ExplicitCastExpr;
using ::clang::BinaryOperator;
using ::clang::ConditionalOperator;
using ::clang::BinaryConditionalOperator;
using ::clang::StmtExpr;
using ::clang::ConvertVectorExpr;
using ::clang::VAArgExpr;
using ::clang::ChooseExpr;
using ::clang::NoInitExpr;
using ::clang::ArrayInitLoopExpr;
using ::clang::ImplicitValueInitExpr;
using ::clang::InitListExpr;
using ::clang::ExtVectorElementExpr;
using ::clang::AsTypeExpr;
using ::clang::DeclRefExpr;
using ::clang::RecoveryExpr;
using ::clang::CXXRewrittenBinaryOperator;
using ::clang::CXXStdInitializerListExpr;
using ::clang::CXXTypeidExpr;
using ::clang::MSPropertyRefExpr;
using ::clang::MSPropertySubscriptExpr;
using ::clang::CXXUuidofExpr;
using ::clang::CXXThisExpr;
using ::clang::CXXThrowExpr;
using ::clang::CXXBindTemporaryExpr;
using ::clang::CXXScalarValueInitExpr;
using ::clang::CXXDeleteExpr;
using ::clang::ArrayTypeTraitExpr;
using ::clang::ExpressionTraitExpr;
using ::clang::CXXNoexceptExpr;
using ::clang::PackExpansionExpr;
using ::clang::SubstNonTypeTemplateParmExpr;
using ::clang::CoroutineSuspendExpr;
using ::clang::DependentCoawaitExpr;
using ::clang::CXXNewExpr;
using ::clang::CXXPseudoDestructorExpr;
using ::clang::OverloadExpr;
using ::clang::DependentScopeDeclRefExpr;
using ::clang::CXXConstructExpr;
using ::clang::CXXTemporaryObjectExpr;
using ::clang::CXXDefaultInitExpr;
using ::clang::CXXDefaultArgExpr;
using ::clang::LambdaExpr;
using ::clang::CXXUnresolvedConstructExpr;
using ::clang::CXXDependentScopeMemberExpr;
using ::clang::MaterializeTemporaryExpr;
using ::clang::CXXFoldExpr;
using ::clang::CXXParenListInitExpr;
using ::clang::TypeTraitExpr;
using ::clang::ConceptSpecializationExpr;
using ::clang::SYCLUniqueStableNameExpr;
using ::clang::PredefinedExpr;
using ::clang::CallExpr;
using ::clang::OffsetOfExpr;
using ::clang::MemberExpr;
using ::clang::ShuffleVectorExpr;
using ::clang::GenericSelectionExpr;
using ::clang::DesignatedInitExpr;
using ::clang::ParenListExpr;
using ::clang::PseudoObjectExpr;
using ::clang::OMPArraySectionExpr;
using ::clang::OMPArrayShapingExpr;
using ::clang::OMPIteratorExpr;
using ::clang::ObjCArrayLiteral;
using ::clang::ObjCDictionaryLiteral;
using ::clang::ObjCBoxedExpr;
using ::clang::ObjCEncodeExpr;
using ::clang::ObjCIvarRefExpr;
using ::clang::ObjCPropertyRefExpr;
using ::clang::ObjCSubscriptRefExpr;
using ::clang::ObjCIsaExpr;
using ::clang::ObjCIndirectCopyRestoreExpr;
using ::clang::ObjCMessageExpr;
using ::clang::computeDependence;
using ::clang::CastKind;
using ::clang::BinaryOperatorKind;
using ::clang::UnaryOperatorKind;
using ::clang::ObjCBridgeCastKind;
using ::clang::DeclGroup;
using ::clang::DeclGroupRef;
using ::clang::StmtIteratorBase;
using ::clang::StmtIteratorImpl;
using ::clang::ConstStmtIterator;
using ::clang::StmtIterator;
using ::clang::cast_away_const;
using ::clang::ODRHash;
using ::clang::Token;
using ::clang::DeclStmt;
using ::clang::NullStmt;
using ::clang::SwitchCase;
using ::clang::CaseStmt;
using ::clang::DefaultStmt;
using ::clang::ValueStmt;
using ::clang::AttributedStmt;
using ::clang::IfStmt;
using ::clang::SwitchStmt;
using ::clang::WhileStmt;
using ::clang::DoStmt;
using ::clang::ForStmt;
using ::clang::GotoStmt;
using ::clang::IndirectGotoStmt;
using ::clang::ContinueStmt;
using ::clang::BreakStmt;
using ::clang::ReturnStmt;
using ::clang::AsmStmt;
using ::clang::GCCAsmStmt;
using ::clang::MSAsmStmt;
using ::clang::SEHExceptStmt;
using ::clang::SEHFinallyStmt;
using ::clang::SEHTryStmt;
using ::clang::SEHLeaveStmt;
using ::clang::CapturedStmt;
using ::clang::TemplateArgumentLocInfo;
using ::clang::ASTTemplateKWAndArgsInfo;
using ::clang::CXXMemberCallExpr;
using ::clang::CXXOperatorCallExpr;
using ::clang::CastExpr;
using ::clang::SubobjectAdjustment;
using ::clang::ConstantExprKind;
using ::clang::ConstantExpr;
using ::clang::APNumericStorage;
using ::clang::APIntStorage;
using ::clang::APFloatStorage;
using ::clang::IntegerLiteral;
using ::clang::FixedPointLiteral;
using ::clang::CharacterLiteral;
using ::clang::FloatingLiteral;
using ::clang::ImaginaryLiteral;
using ::clang::OffsetOfNode;
using ::clang::MemberExprNameQualifier;
using ::clang::CStyleCastExpr;
using ::clang::CompoundAssignOperator;
using ::clang::AbstractConditionalOperator;
using ::clang::GNUNullExpr;
using ::clang::SourceLocExpr;
using ::clang::DesignatedInitUpdateExpr;
using ::clang::ArrayInitIndexExpr;
using ::clang::TypoExpr;
using ::clang::LambdaCapture;
using ::clang::UnqualTypeLoc;
using ::clang::QualifiedTypeLoc;
using ::clang::ConcreteTypeLoc;
using ::clang::InheritingConcreteTypeLoc;
using ::clang::TypeSpecLocInfo;
using ::clang::TypeSpecTypeLoc;
using ::clang::BuiltinLocInfo;
using ::clang::BuiltinTypeLoc;
using ::clang::UsingTypeLoc;
using ::clang::TypedefTypeLoc;
using ::clang::InjectedClassNameTypeLoc;
using ::clang::UnresolvedUsingTypeLoc;
using ::clang::TagTypeLoc;
using ::clang::RecordTypeLoc;
using ::clang::EnumTypeLoc;
using ::clang::TemplateTypeParmTypeLoc;
using ::clang::ObjCTypeParamTypeLocInfo;
using ::clang::ObjCTypeParamTypeLoc;
using ::clang::SubstTemplateTypeParmTypeLoc;
using ::clang::SubstTemplateTypeParmPackTypeLoc;
using ::clang::AttributedLocInfo;
using ::clang::AttributedTypeLoc;
using ::clang::BTFTagAttributedLocInfo;
using ::clang::BTFTagAttributedTypeLoc;
using ::clang::ObjCObjectTypeLocInfo;
using ::clang::ObjCObjectTypeLoc;
using ::clang::ObjCInterfaceLocInfo;
using ::clang::ObjCInterfaceTypeLoc;
using ::clang::MacroQualifiedLocInfo;
using ::clang::MacroQualifiedTypeLoc;
using ::clang::ParenLocInfo;
using ::clang::ParenTypeLoc;
using ::clang::AdjustedLocInfo;
using ::clang::AdjustedTypeLoc;
using ::clang::DecayedTypeLoc;
using ::clang::PointerLikeLocInfo;
using ::clang::PointerLikeTypeLoc;
using ::clang::PointerTypeLoc;
using ::clang::BlockPointerTypeLoc;
using ::clang::MemberPointerLocInfo;
using ::clang::MemberPointerTypeLoc;
using ::clang::ObjCObjectPointerTypeLoc;
using ::clang::ReferenceTypeLoc;
using ::clang::LValueReferenceTypeLoc;
using ::clang::RValueReferenceTypeLoc;
using ::clang::FunctionLocInfo;
using ::clang::FunctionProtoTypeLoc;
using ::clang::FunctionNoProtoTypeLoc;
using ::clang::ArrayLocInfo;
using ::clang::ArrayTypeLoc;
using ::clang::ConstantArrayTypeLoc;
using ::clang::IncompleteArrayTypeLoc;
using ::clang::DependentSizedArrayTypeLoc;
using ::clang::VariableArrayTypeLoc;
using ::clang::TemplateNameLocInfo;
using ::clang::TemplateSpecializationLocInfo;
using ::clang::TemplateSpecializationTypeLoc;
using ::clang::DependentAddressSpaceLocInfo;
using ::clang::DependentAddressSpaceTypeLoc;
using ::clang::VectorTypeLocInfo;
using ::clang::VectorTypeLoc;
using ::clang::DependentVectorTypeLoc;
using ::clang::ExtVectorTypeLoc;
using ::clang::DependentSizedExtVectorTypeLoc;
using ::clang::MatrixTypeLocInfo;
using ::clang::MatrixTypeLoc;
using ::clang::ConstantMatrixTypeLoc;
using ::clang::DependentSizedMatrixTypeLoc;
using ::clang::ComplexTypeLoc;
using ::clang::TypeofLocInfo;
using ::clang::TypeOfExprTypeLocInfo;
using ::clang::TypeOfTypeLocInfo;
using ::clang::TypeofLikeTypeLoc;
using ::clang::TypeOfExprTypeLoc;
using ::clang::TypeOfTypeLoc;
using ::clang::DecltypeTypeLocInfo;
using ::clang::DecltypeTypeLoc;
using ::clang::UnaryTransformTypeLocInfo;
using ::clang::UnaryTransformTypeLoc;
using ::clang::DeducedTypeLoc;
using ::clang::AutoTypeLocInfo;
using ::clang::AutoTypeLoc;
using ::clang::DeducedTemplateSpecializationTypeLoc;
using ::clang::ElaboratedLocInfo;
using ::clang::ElaboratedTypeLoc;
using ::clang::DependentNameLocInfo;
using ::clang::DependentNameTypeLoc;
using ::clang::DependentTemplateSpecializationLocInfo;
using ::clang::DependentTemplateSpecializationTypeLoc;
using ::clang::PackExpansionTypeLocInfo;
using ::clang::PackExpansionTypeLoc;
using ::clang::AtomicTypeLocInfo;
using ::clang::AtomicTypeLoc;
using ::clang::PipeTypeLocInfo;
using ::clang::PipeTypeLoc;
using ::clang::BitIntTypeLoc;
using ::clang::DependentBitIntTypeLoc;
using ::clang::ClassTemplateDecl;
using ::clang::ConstructorUsingShadowDecl;
using ::clang::CXXBasePath;
using ::clang::CXXBasePaths;
using ::clang::CXXDestructorDecl;
using ::clang::CXXFinalOverriderMap;
using ::clang::CXXIndirectPrimaryBaseSet;
using ::clang::DecompositionDecl;
using ::clang::FriendDecl;
using ::clang::BaseUsingDecl;
using ::clang::UsingDecl;
using ::clang::AccessSpecDecl;
using ::clang::ExplicitSpecifier;
using ::clang::CXXDeductionGuideDecl;
using ::clang::RequiresExprBodyDecl;
using ::clang::InheritedConstructor;
using ::clang::CXXConversionDecl;
using ::clang::LifetimeExtendedTemporaryDecl;
using ::clang::UsingEnumDecl;
using ::clang::UsingPackDecl;
using ::clang::UnresolvedUsingValueDecl;
using ::clang::UnresolvedUsingIfExistsDecl;
using ::clang::StaticAssertDecl;
using ::clang::BindingDecl;
using ::clang::MSPropertyDecl;
using ::clang::MSGuidDecl;
using ::clang::UnnamedGlobalConstantDecl;
namespace ObjCPropertyAttribute {
using ::clang::ObjCPropertyAttribute::Kind;
} // namespace ObjCPropertyAttribute
using ::clang::SourceLocation;
using ::clang::SelectorLocationsKind;
using ::clang::hasStandardSelectorLocs;
using ::clang::getStandardSelectorLoc;
using ::clang::ObjCListBase;
using ::clang::ObjCList;
using ::clang::ObjCProtocolList;
using ::clang::ObjCTypeParamVariance;
using ::clang::ObjCTypeParamList;
using ::clang::ObjCPropertyQueryKind;
using ::clang::ObjCAtDefsFieldDecl;
using ::clang::ObjCCompatibleAliasDecl;
using ::clang::ConstraintSatisfaction;
using ::clang::UnsatisfiedConstraintRecord;
using ::clang::ASTConstraintSatisfaction;
using ::clang::ConceptReference;
using ::clang::ClassTemplatePartialSpecializationDecl;
using ::clang::NonTypeTemplateParmDecl;
using ::clang::VarTemplatePartialSpecializationDecl;
using ::clang::TemplateParameter;
using ::clang::getAsNamedDecl;
using ::clang::FixedSizeTemplateParameterListStorage;
using ::clang::allocateDefaultArgStorageChain;
using ::clang::DefaultArgStorage;
using ::clang::RedeclarableTemplateDecl;
using ::clang::TemplateParmPosition;
using ::clang::ClassTemplateSpecializationDecl;
using ::clang::FriendTemplateDecl;
using ::clang::ClassScopeFunctionSpecializationDecl;
using ::clang::VarTemplateSpecializationDecl;
using ::clang::ImplicitConceptSpecializationDecl;
using ::clang::TemplateParamObjectDecl;
using ::clang::getAsTypeTemplateDecl;
using ::clang::getExpandedPackSize;
using ::clang::getReplacedTemplateParameterList;
using ::clang::ObjCStringLiteral;
using ::clang::ObjCBoolLiteralExpr;
using ::clang::ObjCDictionaryElement;
using ::clang::ObjCDictionaryLiteral_KeyValuePair;
using ::clang::ObjCDictionaryLiteral_ExpansionData;
using ::clang::ObjCSelectorExpr;
using ::clang::ObjCProtocolExpr;
using ::clang::ObjCBridgedCastExpr;
using ::clang::ObjCAvailabilityCheckExpr;
using ::clang::ASTStmtReader;
using ::clang::ASTStmtWriter;
namespace concepts {
using ::clang::concepts::Requirement;
using ::clang::concepts::TypeRequirement;
using ::clang::concepts::ExprRequirement;
using ::clang::concepts::NestedRequirement;
using ::clang::concepts::EntityPrinter;
using ::clang::concepts::createSubstDiagAt;
} // namespace concepts
using ::clang::RequiresExpr;
using ::clang::CXXCatchStmt;
using ::clang::CXXTryStmt;
using ::clang::CXXForRangeStmt;
using ::clang::MSDependentExistsStmt;
using ::clang::CoroutineBodyStmt;
using ::clang::CoreturnStmt;
using ::clang::CUDAKernelCallExpr;
using ::clang::CXXNamedCastExpr;
using ::clang::CXXStaticCastExpr;
using ::clang::CXXDynamicCastExpr;
using ::clang::CXXReinterpretCastExpr;
using ::clang::CXXConstCastExpr;
using ::clang::CXXAddrspaceCastExpr;
using ::clang::UserDefinedLiteral;
using ::clang::CXXBoolLiteralExpr;
using ::clang::CXXNullPtrLiteralExpr;
using ::clang::CXXTemporary;
using ::clang::CXXInheritedCtorInitExpr;
using ::clang::CXXFunctionalCastExpr;
using ::clang::PseudoDestructorTypeStorage;
using ::clang::UnresolvedLookupExpr;
using ::clang::ExprWithCleanups;
using ::clang::UnresolvedMemberExpr;
using ::clang::SizeOfPackExpr;
using ::clang::SubstNonTypeTemplateParmPackExpr;
using ::clang::FunctionParmPackExpr;
using ::clang::CoawaitExpr;
using ::clang::CoyieldExpr;
using ::clang::BuiltinBitCastExpr;
using ::clang::OMPIteratorHelperData;
using ::clang::ObjCForCollectionStmt;
using ::clang::ObjCAtCatchStmt;
using ::clang::ObjCAtFinallyStmt;
using ::clang::ObjCAtTryStmt;
using ::clang::ObjCAtSynchronizedStmt;
using ::clang::ObjCAtThrowStmt;
using ::clang::ObjCAutoreleasePoolStmt;
using ::clang::OMPNoChildClause;
using ::clang::OMPOneStmtClause;
using ::clang::OMPClauseWithPreInit;
using ::clang::OMPClauseWithPostUpdate;
using ::clang::OMPVarListLocTy;
using ::clang::OMPVarListClause;
using ::clang::OMPAllocatorClause;
using ::clang::OMPAlignClause;
using ::clang::OMPAllocateClause;
using ::clang::OMPIfClause;
using ::clang::OMPFinalClause;
using ::clang::OMPNumThreadsClause;
using ::clang::OMPSafelenClause;
using ::clang::OMPSimdlenClause;
using ::clang::OMPSizesClause;
using ::clang::OMPFullClause;
using ::clang::OMPPartialClause;
using ::clang::OMPCollapseClause;
using ::clang::OMPDefaultClause;
using ::clang::OMPProcBindClause;
using ::clang::OMPUnifiedAddressClause;
using ::clang::OMPUnifiedSharedMemoryClause;
using ::clang::OMPReverseOffloadClause;
using ::clang::OMPDynamicAllocatorsClause;
using ::clang::OMPAtomicDefaultMemOrderClause;
using ::clang::OMPAtClause;
using ::clang::OMPSeverityClause;
using ::clang::OMPMessageClause;
using ::clang::OMPScheduleClause;
using ::clang::OMPOrderedClause;
using ::clang::OMPNowaitClause;
using ::clang::OMPUntiedClause;
using ::clang::OMPMergeableClause;
using ::clang::OMPReadClause;
using ::clang::OMPWriteClause;
using ::clang::OMPUpdateClause;
using ::clang::OMPCaptureClause;
using ::clang::OMPCompareClause;
using ::clang::OMPSeqCstClause;
using ::clang::OMPAcqRelClause;
using ::clang::OMPAcquireClause;
using ::clang::OMPReleaseClause;
using ::clang::OMPRelaxedClause;
using ::clang::OMPPrivateClause;
using ::clang::OMPFirstprivateClause;
using ::clang::OMPLastprivateClause;
using ::clang::OMPSharedClause;
using ::clang::OMPReductionClause;
using ::clang::OMPTaskReductionClause;
using ::clang::OMPInReductionClause;
using ::clang::OMPLinearClause;
using ::clang::OMPAlignedClause;
using ::clang::OMPCopyinClause;
using ::clang::OMPCopyprivateClause;
using ::clang::OMPFlushClause;
using ::clang::OMPDepobjClause;
using ::clang::OMPDependClause;
using ::clang::OMPDeviceClause;
using ::clang::OMPThreadsClause;
using ::clang::OMPSIMDClause;
using ::clang::OMPClauseMappableExprCommon;
using ::clang::OMPMappableExprListSizeTy;
using ::clang::OMPMappableExprListClause;
using ::clang::OMPMapClause;
using ::clang::OMPNumTeamsClause;
using ::clang::OMPThreadLimitClause;
using ::clang::OMPPriorityClause;
using ::clang::OMPGrainsizeClause;
using ::clang::OMPNogroupClause;
using ::clang::OMPNumTasksClause;
using ::clang::OMPHintClause;
using ::clang::OMPDistScheduleClause;
using ::clang::OMPDefaultmapClause;
using ::clang::OMPToClause;
using ::clang::OMPFromClause;
using ::clang::OMPUseDevicePtrClause;
using ::clang::OMPUseDeviceAddrClause;
using ::clang::OMPIsDevicePtrClause;
using ::clang::OMPHasDeviceAddrClause;
using ::clang::OMPNontemporalClause;
using ::clang::OMPOrderClause;
using ::clang::OMPInitClause;
using ::clang::OMPUseClause;
using ::clang::OMPDestroyClause;
using ::clang::OMPNovariantsClause;
using ::clang::OMPNocontextClause;
using ::clang::OMPDetachClause;
using ::clang::OMPInclusiveClause;
using ::clang::OMPExclusiveClause;
using ::clang::OMPUsesAllocatorsClause;
using ::clang::OMPAffinityClause;
using ::clang::OMPFilterClause;
using ::clang::OMPBindClause;
using ::clang::OMPClauseVisitorBase;
using ::clang::const_ptr;
using ::clang::OMPClauseVisitor;
using ::clang::ConstOMPClauseVisitor;
using ::clang::OMPClausePrinter;
using ::clang::OMPTraitProperty;
using ::clang::OMPTraitSelector;
using ::clang::OMPTraitSet;
using ::clang::TargetOMPContext;
using ::clang::OMPChildren;
using ::clang::OMPXDynCGroupMemClause;
using ::clang::OMPDoacrossClause;
using ::clang::OMPCanonicalLoop;
using ::clang::OMPExecutableDirective;
using ::clang::OMPParallelDirective;
using ::clang::OMPLoopBasedDirective;
using ::clang::OMPLoopTransformationDirective;
using ::clang::OMPLoopDirective;
using ::clang::OMPSimdDirective;
using ::clang::OMPForDirective;
using ::clang::OMPForSimdDirective;
using ::clang::OMPSectionsDirective;
using ::clang::OMPSectionDirective;
using ::clang::OMPSingleDirective;
using ::clang::OMPMasterDirective;
using ::clang::OMPCriticalDirective;
using ::clang::OMPParallelForDirective;
using ::clang::OMPParallelForSimdDirective;
using ::clang::OMPParallelMasterDirective;
using ::clang::OMPParallelMaskedDirective;
using ::clang::OMPParallelSectionsDirective;
using ::clang::OMPTaskDirective;
using ::clang::OMPTaskyieldDirective;
using ::clang::OMPBarrierDirective;
using ::clang::OMPTaskwaitDirective;
using ::clang::OMPTaskgroupDirective;
using ::clang::OMPFlushDirective;
using ::clang::OMPDepobjDirective;
using ::clang::OMPOrderedDirective;
using ::clang::OMPAtomicDirective;
using ::clang::OMPTargetDirective;
using ::clang::OMPTargetDataDirective;
using ::clang::OMPTargetEnterDataDirective;
using ::clang::OMPTargetExitDataDirective;
using ::clang::OMPTargetParallelDirective;
using ::clang::OMPTargetParallelForDirective;
using ::clang::OMPTeamsDirective;
using ::clang::OMPCancellationPointDirective;
using ::clang::OMPCancelDirective;
using ::clang::OMPTaskLoopDirective;
using ::clang::OMPTaskLoopSimdDirective;
using ::clang::OMPMasterTaskLoopDirective;
using ::clang::OMPMaskedTaskLoopDirective;
using ::clang::OMPMasterTaskLoopSimdDirective;
using ::clang::OMPMaskedTaskLoopSimdDirective;
using ::clang::OMPParallelMasterTaskLoopDirective;
using ::clang::OMPParallelMaskedTaskLoopDirective;
using ::clang::OMPParallelMasterTaskLoopSimdDirective;
using ::clang::OMPParallelMaskedTaskLoopSimdDirective;
using ::clang::OMPDistributeDirective;
using ::clang::OMPTargetUpdateDirective;
using ::clang::OMPDistributeParallelForDirective;
using ::clang::OMPDistributeParallelForSimdDirective;
using ::clang::OMPDistributeSimdDirective;
using ::clang::OMPTargetParallelForSimdDirective;
using ::clang::OMPTargetSimdDirective;
using ::clang::OMPTeamsDistributeDirective;
using ::clang::OMPTeamsDistributeSimdDirective;
using ::clang::OMPTeamsDistributeParallelForSimdDirective;
using ::clang::OMPTeamsDistributeParallelForDirective;
using ::clang::OMPTargetTeamsDirective;
using ::clang::OMPTargetTeamsDistributeDirective;
using ::clang::OMPTargetTeamsDistributeParallelForDirective;
using ::clang::OMPTargetTeamsDistributeParallelForSimdDirective;
using ::clang::OMPTargetTeamsDistributeSimdDirective;
using ::clang::OMPTileDirective;
using ::clang::OMPUnrollDirective;
using ::clang::OMPScanDirective;
using ::clang::OMPInteropDirective;
using ::clang::OMPDispatchDirective;
using ::clang::OMPMaskedDirective;
using ::clang::OMPMetaDirective;
using ::clang::OMPGenericLoopDirective;
using ::clang::OMPTeamsGenericLoopDirective;
using ::clang::OMPTargetTeamsGenericLoopDirective;
using ::clang::OMPParallelGenericLoopDirective;
using ::clang::OMPTargetParallelGenericLoopDirective;
using ::clang::OMPErrorDirective;
using ::clang::StmtVisitorBase;
using ::clang::StmtVisitor;
using ::clang::ConstStmtVisitor;
using ::clang::ASTDeserializationListener;
using ::clang::SemaConsumer;
using ::clang::FormatASTNodeDiagnosticArgument;
using ::clang::desugarForDiagnostic;
using ::clang::TraversalKind;
using ::clang::ASTNodeKind;
using ::clang::DynTypedNode;
using ::clang::AttributeCommonInfo;
using ::clang::TypeAttr;
using ::clang::StmtAttr;
using ::clang::InheritableAttr;
using ::clang::DeclOrStmtAttr;
using ::clang::InheritableParamAttr;
using ::clang::HLSLAnnotationAttr;
using ::clang::ParameterABIAttr;
using ::clang::ParamIdx;
using ::clang::AArch64SVEPcsAttr;
using ::clang::AArch64VectorPcsAttr;
using ::clang::AMDGPUFlatWorkGroupSizeAttr;
using ::clang::AMDGPUKernelCallAttr;
using ::clang::AMDGPUNumSGPRAttr;
using ::clang::AMDGPUNumVGPRAttr;
using ::clang::AMDGPUWavesPerEUAttr;
using ::clang::ARMInterruptAttr;
using ::clang::AVRInterruptAttr;
using ::clang::AVRSignalAttr;
using ::clang::AbiTagAttr;
using ::clang::AcquireCapabilityAttr;
using ::clang::AcquireHandleAttr;
using ::clang::AcquiredAfterAttr;
using ::clang::AcquiredBeforeAttr;
using ::clang::AddressSpaceAttr;
using ::clang::AliasAttr;
using ::clang::AlignMac68kAttr;
using ::clang::AlignNaturalAttr;
using ::clang::AlignValueAttr;
using ::clang::AlignedAttr;
using ::clang::AllocAlignAttr;
using ::clang::AllocSizeAttr;
using ::clang::AlwaysDestroyAttr;
using ::clang::AlwaysInlineAttr;
using ::clang::AnalyzerNoReturnAttr;
using ::clang::AnnotateAttr;
using ::clang::AnnotateTypeAttr;
using ::clang::AnyX86InterruptAttr;
using ::clang::AnyX86NoCallerSavedRegistersAttr;
using ::clang::AnyX86NoCfCheckAttr;
using ::clang::ArcWeakrefUnavailableAttr;
using ::clang::ArgumentWithTypeTagAttr;
using ::clang::ArmBuiltinAliasAttr;
using ::clang::ArmMveStrictPolymorphismAttr;
using ::clang::ArmStreamingAttr;
using ::clang::ArtificialAttr;
using ::clang::AsmLabelAttr;
using ::clang::AssertCapabilityAttr;
using ::clang::AssertExclusiveLockAttr;
using ::clang::AssertSharedLockAttr;
using ::clang::AssumeAlignedAttr;
using ::clang::AssumptionAttr;
using ::clang::AvailabilityAttr;
using ::clang::AvailableOnlyInDefaultEvalMethodAttr;
using ::clang::BPFPreserveAccessIndexAttr;
using ::clang::BTFDeclTagAttr;
using ::clang::BlocksAttr;
using ::clang::BuiltinAttr;
using ::clang::BuiltinAliasAttr;
using ::clang::C11NoReturnAttr;
using ::clang::CDeclAttr;
using ::clang::CFAuditedTransferAttr;
using ::clang::CFConsumedAttr;
using ::clang::CFGuardAttr;
using ::clang::CFICanonicalJumpTableAttr;
using ::clang::CFReturnsNotRetainedAttr;
using ::clang::CFReturnsRetainedAttr;
using ::clang::CFUnknownTransferAttr;
using ::clang::CPUDispatchAttr;
using ::clang::CPUSpecificAttr;
using ::clang::CUDAConstantAttr;
using ::clang::CUDADeviceAttr;
using ::clang::CUDADeviceBuiltinSurfaceTypeAttr;
using ::clang::CUDADeviceBuiltinTextureTypeAttr;
using ::clang::CUDAGlobalAttr;
using ::clang::CUDAHostAttr;
using ::clang::CUDAInvalidTargetAttr;
using ::clang::CUDALaunchBoundsAttr;
using ::clang::CUDASharedAttr;
using ::clang::CXX11NoReturnAttr;
using ::clang::CallableWhenAttr;
using ::clang::CallbackAttr;
using ::clang::CalledOnceAttr;
using ::clang::CapabilityAttr;
using ::clang::CapturedRecordAttr;
using ::clang::CarriesDependencyAttr;
using ::clang::CleanupAttr;
using ::clang::CmseNSCallAttr;
using ::clang::CmseNSEntryAttr;
using ::clang::CodeSegAttr;
using ::clang::ColdAttr;
using ::clang::CommonAttr;
using ::clang::ConstAttr;
using ::clang::ConstInitAttr;
using ::clang::ConstructorAttr;
using ::clang::ConsumableAttr;
using ::clang::ConsumableAutoCastAttr;
using ::clang::ConsumableSetOnReadAttr;
using ::clang::ConvergentAttr;
using ::clang::DLLExportAttr;
using ::clang::DLLExportStaticLocalAttr;
using ::clang::DLLImportAttr;
using ::clang::DLLImportStaticLocalAttr;
using ::clang::DeprecatedAttr;
using ::clang::DestructorAttr;
using ::clang::DiagnoseAsBuiltinAttr;
using ::clang::DiagnoseIfAttr;
using ::clang::DisableSanitizerInstrumentationAttr;
using ::clang::DisableTailCallsAttr;
using ::clang::EmptyBasesAttr;
using ::clang::EnableIfAttr;
using ::clang::EnforceTCBAttr;
using ::clang::EnforceTCBLeafAttr;
using ::clang::EnumExtensibilityAttr;
using ::clang::ErrorAttr;
using ::clang::ExcludeFromExplicitInstantiationAttr;
using ::clang::ExclusiveTrylockFunctionAttr;
using ::clang::FallThroughAttr;
using ::clang::FastCallAttr;
using ::clang::FinalAttr;
using ::clang::FlagEnumAttr;
using ::clang::FlattenAttr;
using ::clang::FormatAttr;
using ::clang::FormatArgAttr;
using ::clang::FunctionReturnThunksAttr;
using ::clang::GNUInlineAttr;
using ::clang::GuardedByAttr;
using ::clang::GuardedVarAttr;
using ::clang::HIPManagedAttr;
using ::clang::HLSLGroupSharedAddressSpaceAttr;
using ::clang::HLSLNumThreadsAttr;
using ::clang::HLSLResourceAttr;
using ::clang::HLSLResourceBindingAttr;
using ::clang::HLSLSV_DispatchThreadIDAttr;
using ::clang::HLSLSV_GroupIndexAttr;
using ::clang::HLSLShaderAttr;
using ::clang::HotAttr;
using ::clang::IBActionAttr;
using ::clang::IBOutletAttr;
using ::clang::IBOutletCollectionAttr;
using ::clang::IFuncAttr;
using ::clang::InitPriorityAttr;
using ::clang::InitSegAttr;
using ::clang::IntelOclBiccAttr;
using ::clang::InternalLinkageAttr;
using ::clang::LTOVisibilityPublicAttr;
using ::clang::LayoutVersionAttr;
using ::clang::LeafAttr;
using ::clang::LifetimeBoundAttr;
using ::clang::LikelyAttr;
using ::clang::LoaderUninitializedAttr;
using ::clang::LockReturnedAttr;
using ::clang::LocksExcludedAttr;
using ::clang::LoopHintAttr;
using ::clang::M68kInterruptAttr;
using ::clang::MIGServerRoutineAttr;
using ::clang::MSABIAttr;
using ::clang::MSAllocatorAttr;
using ::clang::MSInheritanceAttr;
using ::clang::MSNoVTableAttr;
using ::clang::MSP430InterruptAttr;
using ::clang::MSStructAttr;
using ::clang::MSVtorDispAttr;
using ::clang::MaxFieldAlignmentAttr;
using ::clang::MayAliasAttr;
using ::clang::MaybeUndefAttr;
using ::clang::MicroMipsAttr;
using ::clang::MinSizeAttr;
using ::clang::MinVectorWidthAttr;
using ::clang::Mips16Attr;
using ::clang::MipsInterruptAttr;
using ::clang::MipsLongCallAttr;
using ::clang::MipsShortCallAttr;
using ::clang::ModeAttr;
using ::clang::MustTailAttr;
using ::clang::NSConsumedAttr;
using ::clang::NSConsumesSelfAttr;
using ::clang::NSErrorDomainAttr;
using ::clang::NSReturnsAutoreleasedAttr;
using ::clang::NSReturnsNotRetainedAttr;
using ::clang::NSReturnsRetainedAttr;
using ::clang::NVPTXKernelAttr;
using ::clang::NakedAttr;
using ::clang::NoAliasAttr;
using ::clang::NoBuiltinAttr;
using ::clang::NoCommonAttr;
using ::clang::NoDebugAttr;
using ::clang::NoDerefAttr;
using ::clang::NoDestroyAttr;
using ::clang::NoDuplicateAttr;
using ::clang::NoEscapeAttr;
using ::clang::NoInlineAttr;
using ::clang::NoInstrumentFunctionAttr;
using ::clang::NoMergeAttr;
using ::clang::NoMicroMipsAttr;
using ::clang::NoMips16Attr;
using ::clang::NoProfileFunctionAttr;
using ::clang::NoRandomizeLayoutAttr;
using ::clang::NoReturnAttr;
using ::clang::NoSanitizeAttr;
using ::clang::NoSpeculativeLoadHardeningAttr;
using ::clang::NoSplitStackAttr;
using ::clang::NoStackProtectorAttr;
using ::clang::NoThreadSafetyAnalysisAttr;
using ::clang::NoThrowAttr;
using ::clang::NoUniqueAddressAttr;
using ::clang::NoUwtableAttr;
using ::clang::NonNullAttr;
using ::clang::NotTailCalledAttr;
using ::clang::OMPAllocateDeclAttr;
using ::clang::OMPCaptureKindAttr;
using ::clang::OMPCaptureNoInitAttr;
using ::clang::OMPDeclareSimdDeclAttr;
using ::clang::OMPDeclareTargetDeclAttr;
using ::clang::OMPDeclareVariantAttr;
using ::clang::OMPReferencedVarAttr;
using ::clang::OMPThreadPrivateDeclAttr;
using ::clang::OSConsumedAttr;
using ::clang::OSConsumesThisAttr;
using ::clang::OSReturnsNotRetainedAttr;
using ::clang::OSReturnsRetainedAttr;
using ::clang::OSReturnsRetainedOnNonZeroAttr;
using ::clang::OSReturnsRetainedOnZeroAttr;
using ::clang::ObjCBoxableAttr;
using ::clang::ObjCBridgeAttr;
using ::clang::ObjCBridgeMutableAttr;
using ::clang::ObjCBridgeRelatedAttr;
using ::clang::ObjCClassStubAttr;
using ::clang::ObjCDesignatedInitializerAttr;
using ::clang::ObjCDirectAttr;
using ::clang::ObjCDirectMembersAttr;
using ::clang::ObjCExceptionAttr;
using ::clang::ObjCExplicitProtocolImplAttr;
using ::clang::ObjCExternallyRetainedAttr;
using ::clang::ObjCGCAttr;
using ::clang::ObjCIndependentClassAttr;
using ::clang::ObjCInertUnsafeUnretainedAttr;
using ::clang::ObjCKindOfAttr;
using ::clang::ObjCMethodFamilyAttr;
using ::clang::ObjCNSObjectAttr;
using ::clang::ObjCNonLazyClassAttr;
using ::clang::ObjCNonRuntimeProtocolAttr;
using ::clang::ObjCOwnershipAttr;
using ::clang::ObjCPreciseLifetimeAttr;
using ::clang::ObjCRequiresPropertyDefsAttr;
using ::clang::ObjCRequiresSuperAttr;
using ::clang::ObjCReturnsInnerPointerAttr;
using ::clang::ObjCRootClassAttr;
using ::clang::ObjCRuntimeNameAttr;
using ::clang::ObjCRuntimeVisibleAttr;
using ::clang::ObjCSubclassingRestrictedAttr;
using ::clang::OpenCLAccessAttr;
using ::clang::OpenCLConstantAddressSpaceAttr;
using ::clang::OpenCLGenericAddressSpaceAttr;
using ::clang::OpenCLGlobalAddressSpaceAttr;
using ::clang::OpenCLGlobalDeviceAddressSpaceAttr;
using ::clang::OpenCLGlobalHostAddressSpaceAttr;
using ::clang::OpenCLIntelReqdSubGroupSizeAttr;
using ::clang::OpenCLKernelAttr;
using ::clang::OpenCLLocalAddressSpaceAttr;
using ::clang::OpenCLPrivateAddressSpaceAttr;
using ::clang::OpenCLUnrollHintAttr;
using ::clang::OptimizeNoneAttr;
using ::clang::OverloadableAttr;
using ::clang::OverrideAttr;
using ::clang::OwnerAttr;
using ::clang::OwnershipAttr;
using ::clang::PackedAttr;
using ::clang::ParamTypestateAttr;
using ::clang::PascalAttr;
using ::clang::PassObjectSizeAttr;
using ::clang::PatchableFunctionEntryAttr;
using ::clang::PcsAttr;
using ::clang::PointerAttr;
using ::clang::PragmaClangBSSSectionAttr;
using ::clang::PragmaClangDataSectionAttr;
using ::clang::PragmaClangRelroSectionAttr;
using ::clang::PragmaClangRodataSectionAttr;
using ::clang::PragmaClangTextSectionAttr;
using ::clang::PreferredNameAttr;
using ::clang::PreserveAllAttr;
using ::clang::PreserveMostAttr;
using ::clang::PtGuardedByAttr;
using ::clang::PtGuardedVarAttr;
using ::clang::Ptr32Attr;
using ::clang::Ptr64Attr;
using ::clang::PureAttr;
using ::clang::RISCVInterruptAttr;
using ::clang::RandomizeLayoutAttr;
using ::clang::ReadOnlyPlacementAttr;
using ::clang::RegCallAttr;
using ::clang::ReinitializesAttr;
using ::clang::ReleaseCapabilityAttr;
using ::clang::ReleaseHandleAttr;
using ::clang::RenderScriptKernelAttr;
using ::clang::ReqdWorkGroupSizeAttr;
using ::clang::RequiresCapabilityAttr;
using ::clang::RestrictAttr;
using ::clang::RetainAttr;
using ::clang::ReturnTypestateAttr;
using ::clang::ReturnsNonNullAttr;
using ::clang::ReturnsTwiceAttr;
using ::clang::SPtrAttr;
using ::clang::SYCLKernelAttr;
using ::clang::SYCLSpecialClassAttr;
using ::clang::ScopedLockableAttr;
using ::clang::SectionAttr;
using ::clang::SelectAnyAttr;
using ::clang::SentinelAttr;
using ::clang::SetTypestateAttr;
using ::clang::SharedTrylockFunctionAttr;
using ::clang::SpeculativeLoadHardeningAttr;
using ::clang::StandaloneDebugAttr;
using ::clang::StdCallAttr;
using ::clang::StrictFPAttr;
using ::clang::StrictGuardStackCheckAttr;
using ::clang::SuppressAttr;
using ::clang::SwiftAsyncAttr;
using ::clang::SwiftAsyncCallAttr;
using ::clang::SwiftAsyncContextAttr;
using ::clang::SwiftAsyncErrorAttr;
using ::clang::SwiftAsyncNameAttr;
using ::clang::SwiftAttrAttr;
using ::clang::SwiftBridgeAttr;
using ::clang::SwiftBridgedTypedefAttr;
using ::clang::SwiftCallAttr;
using ::clang::SwiftContextAttr;
using ::clang::SwiftErrorAttr;
using ::clang::SwiftErrorResultAttr;
using ::clang::SwiftIndirectResultAttr;
using ::clang::SwiftNameAttr;
using ::clang::SwiftNewTypeAttr;
using ::clang::SwiftObjCMembersAttr;
using ::clang::SwiftPrivateAttr;
using ::clang::SysVABIAttr;
using ::clang::TLSModelAttr;
using ::clang::TargetClonesAttr;
using ::clang::TargetVersionAttr;
using ::clang::TestTypestateAttr;
using ::clang::ThisCallAttr;
using ::clang::ThreadAttr;
using ::clang::TransparentUnionAttr;
using ::clang::TrivialABIAttr;
using ::clang::TryAcquireCapabilityAttr;
using ::clang::TypeNonNullAttr;
using ::clang::TypeNullUnspecifiedAttr;
using ::clang::TypeNullableAttr;
using ::clang::TypeNullableResultAttr;
using ::clang::TypeTagForDatatypeAttr;
using ::clang::TypeVisibilityAttr;
using ::clang::UPtrAttr;
using ::clang::UnavailableAttr;
using ::clang::UninitializedAttr;
using ::clang::UnlikelyAttr;
using ::clang::UnsafeBufferUsageAttr;
using ::clang::UnusedAttr;
using ::clang::UseHandleAttr;
using ::clang::UsedAttr;
using ::clang::UsingIfExistsAttr;
using ::clang::UuidAttr;
using ::clang::VecReturnAttr;
using ::clang::VecTypeHintAttr;
using ::clang::VectorCallAttr;
using ::clang::VisibilityAttr;
using ::clang::WarnUnusedAttr;
using ::clang::WarnUnusedResultAttr;
using ::clang::WeakAttr;
using ::clang::WeakImportAttr;
using ::clang::WeakRefAttr;
using ::clang::WebAssemblyExportNameAttr;
using ::clang::WebAssemblyFuncrefAttr;
using ::clang::WebAssemblyImportModuleAttr;
using ::clang::WebAssemblyImportNameAttr;
using ::clang::WorkGroupSizeHintAttr;
using ::clang::X86ForceAlignArgPointerAttr;
using ::clang::XRayInstrumentAttr;
using ::clang::XRayLogArgsAttr;
using ::clang::ZeroCallUsedRegsAttr;
namespace attrvisitor {
using ::clang::attrvisitor::Base;
} // namespace attrvisitor
using ::clang::AttrVisitor;
using ::clang::ConstAttrVisitor;
using ::clang::OMPDeclarativeDirective;
using ::clang::OMPThreadPrivateDecl;
using ::clang::OMPDeclareReductionDecl;
using ::clang::OMPDeclareMapperDecl;
using ::clang::OMPCapturedExprDecl;
using ::clang::OMPRequiresDecl;
using ::clang::OMPAllocateDecl;
namespace declvisitor {
using ::clang::declvisitor::Base;
} // namespace declvisitor
using ::clang::DeclVisitor;
using ::clang::ConstDeclVisitor;
using ::clang::LocInfoType;
namespace templateargumentvisitor {
using ::clang::templateargumentvisitor::Base;
} // namespace templateargumentvisitor
using ::clang::TemplateArgumentVisitor;
using ::clang::ConstTemplateArgumentVisitor;
using ::clang::TypeVisitor;
using ::clang::ASTNodeTraverser;
using ::clang::TextTreeStructure;
using ::clang::TextNodeDumper;
using ::clang::ASTDumper;
using ::clang::ASTImportError;
using ::clang::ASTImporterSharedState;
using ::clang::FileManager;
using ::clang::getCanonicalForwardRedeclChain;
using ::clang::ASTImporter;
using ::clang::ASTImporterLookupTable;
using ::clang::getLambdaStaticInvokerName;
using ::clang::isLambdaCallOperator;
using ::clang::isGenericLambdaCallOperatorSpecialization;
using ::clang::isLambdaConversionOperator;
using ::clang::isGenericLambdaCallOperatorOrStaticInvokerSpecialization;
using ::clang::getLambdaAwareParentOfDeclContext;
using ::clang::StructuralEquivalenceKind;
using ::clang::StructuralEquivalenceContext;
using ::clang::AvailabilitySpec;
using ::clang::BaseSubobject;
using ::clang::QualTypeOrdering;
using ::clang::CXXBasePathElement;
using ::clang::UniqueVirtualMethod;
using ::clang::OverridingMethods;
using ::clang::inheritanceModelHasVBPtrOffsetField;
using ::clang::inheritanceModelHasNVOffsetField;
using ::clang::inheritanceModelHasVBTableOffsetField;
using ::clang::inheritanceModelHasOnlyOneField;
using ::clang::SourceMgr;
using ::clang::CurrentSourceLocExprScope;
namespace data_collection {
using ::clang::data_collection::getMacroStack;
using ::clang::data_collection::addDataToConsumer;
} // namespace data_collection
using ::clang::DependentDiagnostic;
using ::clang::StoredDeclsList;
using ::clang::DependentStoredDeclsMap;
using ::clang::EvaluatedExprVisitorBase;
using ::clang::EvaluatedExprVisitor;
using ::clang::ConstEvaluatedExprVisitor;
using ::clang::ExternalASTMerger;
namespace analyze_format_string {
using ::clang::analyze_format_string::OptionalFlag;
using ::clang::analyze_format_string::LengthModifier;
using ::clang::analyze_format_string::ConversionSpecifier;
using ::clang::analyze_format_string::ArgType;
using ::clang::analyze_format_string::OptionalAmount;
using ::clang::analyze_format_string::FormatSpecifier;
using ::clang::analyze_format_string::PositionContext;
using ::clang::analyze_format_string::FormatStringHandler;
using ::clang::analyze_format_string::ParsePrintfString;
using ::clang::analyze_format_string::ParseFormatStringHasSArg;
using ::clang::analyze_format_string::ParseScanfString;
using ::clang::analyze_format_string::parseFormatStringHasFormattingSpecifiers;
} // namespace analyze_format_string
namespace analyze_printf {
using ::clang::analyze_printf::PrintfConversionSpecifier;
using ::clang::analyze_printf::ArgType;
using ::clang::analyze_printf::LengthModifier;
using ::clang::analyze_printf::OptionalAmount;
using ::clang::analyze_printf::OptionalFlag;
using ::clang::analyze_printf::PrintfSpecifier;
} // namespace analyze_printf
namespace analyze_scanf {
using ::clang::analyze_scanf::ScanfConversionSpecifier;
using ::clang::analyze_scanf::ArgType;
using ::clang::analyze_scanf::LengthModifier;
using ::clang::analyze_scanf::OptionalAmount;
using ::clang::analyze_scanf::OptionalFlag;
using ::clang::analyze_scanf::ScanfSpecifier;
} // namespace analyze_scanf
using ::clang::DynamicInitKind;
using ::clang::KernelReferenceKind;
using ::clang::IgnoreExprNodes;
using ::clang::IgnoreImplicitCastsSingleStep;
using ::clang::IgnoreImplicitCastsExtraSingleStep;
using ::clang::IgnoreCastsSingleStep;
using ::clang::IgnoreLValueCastsSingleStep;
using ::clang::IgnoreBaseCastsSingleStep;
using ::clang::IgnoreImplicitSingleStep;
using ::clang::IgnoreElidableImplicitConstructorSingleStep;
using ::clang::IgnoreImplicitAsWrittenSingleStep;
using ::clang::IgnoreParensOnlySingleStep;
using ::clang::IgnoreParensSingleStep;
using ::clang::MethodVFTableLocation;
using ::clang::ThisAdjustment;
using ::clang::ThunkInfo;
using ::clang::ItaniumMangleContext;
using ::clang::MicrosoftMangleContext;
using ::clang::ASTNameGenerator;
using ::clang::NodeStreamer;
using ::clang::JSONNodeDumper;
using ::clang::JSONDumper;
using ::clang::RecursiveASTVisitor;
using ::clang::LexicallyOrderedRecursiveASTVisitor;
using ::clang::NSAPI;
using ::clang::DestructedTypeVisitor;
using ::clang::DefaultInitializedTypeVisitor;
using ::clang::CopiedTypeVisitor;
using ::clang::ODRDiagsEmitter;
namespace analyze_os_log {
using ::clang::analyze_os_log::OSLogBufferItem;
using ::clang::analyze_os_log::OSLogBufferLayout;
using ::clang::analyze_os_log::computeOSLogBufferLayout;
} // namespace analyze_os_log
using ::clang::OptionalDiagnostic;
using ::clang::ParentMap;
using ::clang::TraversalKindScope;
using ::clang::PrettyDeclStackTraceEntry;
namespace TypeName {
using ::clang::TypeName::getFullyQualifiedName;
using ::clang::TypeName::getFullyQualifiedType;
} // namespace TypeName
namespace randstruct {
using ::clang::randstruct::randomizeStructureLayout;
} // namespace randstruct
using ::clang::TypeLocVisitor;
using ::clang::VTTVTable;
using ::clang::VTTComponent;
using ::clang::VTTBuilder;
using ::clang::VTableComponent;
using ::clang::VTableLayout;
using ::clang::ItaniumVTableContext;
using ::clang::VPtrInfo;
using ::clang::VirtualBaseInfo;
using ::clang::MicrosoftVTableContext;
} // namespace clang
namespace llvm {
using ::llvm::PointerLikeTypeTraits;
using ::llvm::DenseMapInfo;
using ::llvm::simplify_type;
using ::llvm::StringRef;
using ::llvm::APSInt;
using ::llvm::isa_impl;
using ::llvm::cast_convert_val;
using ::llvm::APFixedPoint;
using ::llvm::FixedPointSemantics;
using ::llvm::fltSemantics;
using ::llvm::SmallPtrSet;
using ::llvm::FoldingSetNodeID;
using ::llvm::raw_ostream;
using ::llvm::SmallVectorImpl;
using ::llvm::GraphTraits;
} // namespace llvm
}
