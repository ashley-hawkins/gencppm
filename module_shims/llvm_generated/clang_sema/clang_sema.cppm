module;
#include "clang_sema.hpp"
export module clang.Sema;

export {
namespace clang {
using ::clang::Decl;
using ::clang::FunctionDecl;
using ::clang::QualType;
using ::clang::Sema;
namespace sema {
using ::clang::sema::FunctionScopeInfo;
using ::clang::sema::AnalysisBasedWarnings;
using ::clang::sema::AccessedEntity;
using ::clang::sema::BlockScopeInfo;
using ::clang::sema::Capture;
using ::clang::sema::CapturedRegionScopeInfo;
using ::clang::sema::CapturingScopeInfo;
using ::clang::sema::CompoundScopeInfo;
using ::clang::sema::DelayedDiagnostic;
using ::clang::sema::DelayedDiagnosticPool;
using ::clang::sema::LambdaScopeInfo;
using ::clang::sema::PossiblyUnreachableDiag;
using ::clang::sema::RISCVIntrinsicManager;
using ::clang::sema::SemaPPCallbacks;
using ::clang::sema::TemplateDeductionInfo;
} // namespace sema
using ::clang::FieldDecl;
using ::clang::CXXFieldCollector;
using ::clang::CleanupInfo;
using ::clang::CodeCompleteOptions;
using ::clang::CXXBaseSpecifier;
using ::clang::CXXCtorInitializer;
using ::clang::Expr;
using ::clang::ParsedTemplateArgument;
using ::clang::Stmt;
using ::clang::TemplateName;
using ::clang::TemplateParameterList;
using ::clang::OpaquePtr;
using ::clang::UnionOpaquePtr;
using ::clang::StreamingDiagnostic;
using ::clang::IsResultPtrLowBitFree;
using ::clang::ActionResult;
using ::clang::ParsedType;
using ::clang::UnionParsedType;
using ::clang::ExprResult;
using ::clang::StmtResult;
using ::clang::TypeResult;
using ::clang::BaseResult;
using ::clang::MemInitResult;
using ::clang::DeclResult;
using ::clang::ParsedTemplateTy;
using ::clang::UnionParsedTemplateTy;
using ::clang::MultiExprArg;
using ::clang::MultiStmtArg;
using ::clang::ASTTemplateArgsPtr;
using ::clang::MultiTypeArg;
using ::clang::MultiTemplateParamsArg;
using ::clang::ExprError;
using ::clang::StmtError;
using ::clang::TypeError;
using ::clang::ExprEmpty;
using ::clang::StmtEmpty;
using ::clang::AssertSuccess;
using ::clang::ASTContext;
using ::clang::IdentifierInfo;
using ::clang::LangOptions;
using ::clang::TargetInfo;
using ::clang::AvailabilityChange;
namespace detail {
using ::clang::detail::AvailabilitySlot;
using ::clang::detail::AvailabilityData;
using ::clang::detail::TypeTagForDatatypeData;
using ::clang::detail::PropertyData;
} // namespace detail
using ::clang::IdentifierLoc;
using ::clang::ArgsUnion;
using ::clang::ArgsVector;
using ::clang::ParsedAttr;
using ::clang::AttributePool;
using ::clang::AttributeFactory;
using ::clang::ParsedAttributesView;
using ::clang::ParsedAttributes;
using ::clang::takeAndConcatenateAttrs;
using ::clang::AttributeArgumentNType;
using ::clang::AttributeDeclKind;
using ::clang::CXXRecordDecl;
using ::clang::TypeLoc;
using ::clang::NamespaceAliasDecl;
using ::clang::NamespaceDecl;
using ::clang::ObjCDeclSpec;
using ::clang::Declarator;
using ::clang::TemplateIdAnnotation;
using ::clang::CXXScopeSpec;
using ::clang::DeclSpec;
using ::clang::UnqualifiedIdKind;
using ::clang::UnqualifiedId;
using ::clang::DeclaratorChunk;
using ::clang::DecompositionDeclarator;
using ::clang::FunctionDefinitionKind;
using ::clang::DeclaratorContext;
using ::clang::ImplicitTypenameContext;
using ::clang::FieldDeclarator;
using ::clang::VirtSpecifiers;
using ::clang::LambdaCaptureInitKind;
using ::clang::LambdaIntroducer;
using ::clang::InventedTemplateParameterInfo;
using ::clang::DeclContext;
using ::clang::FunctionTemplateDecl;
using ::clang::NamedDecl;
using ::clang::NestedNameSpecifier;
using ::clang::Preprocessor;
using ::clang::RawComment;
using ::clang::UsingShadowDecl;
using ::clang::SimplifiedTypeClass;
using ::clang::getSimplifiedTypeClass;
using ::clang::getDeclUsageType;
using ::clang::getMacroUsagePriority;
using ::clang::getCursorKindForDecl;
using ::clang::CodeCompletionContext;
using ::clang::getCompletionKindString;
using ::clang::CodeCompletionString;
using ::clang::CodeCompletionAllocator;
using ::clang::GlobalCodeCompletionAllocator;
using ::clang::CodeCompletionTUInfo;
using ::clang::CodeCompletionBuilder;
using ::clang::CodeCompletionResult;
using ::clang::CodeCompleteConsumer;
using ::clang::getCompletionComment;
using ::clang::getPatternCompletionComment;
using ::clang::getParameterComment;
using ::clang::PrintingCodeCompleteConsumer;
using ::clang::MemberExpr;
using ::clang::TypoCorrection;
using ::clang::CorrectionCandidateCallback;
using ::clang::DefaultFilterCCC;
using ::clang::DeclFilterCCC;
using ::clang::FunctionCallFilterCCC;
using ::clang::NoTypoCorrectionCCC;
using ::clang::WeakInfo;
using ::clang::CXXConstructorDecl;
using ::clang::DeclaratorDecl;
using ::clang::LookupResult;
using ::clang::Scope;
using ::clang::TypedefNameDecl;
using ::clang::ValueDecl;
using ::clang::VarDecl;
using ::clang::LateParsedTemplate;
using ::clang::ExternalVTableUse;
using ::clang::ExternalSemaSource;
using ::clang::DeclarationName;
using ::clang::IdentifierResolver;
using ::clang::ObjCMethodDecl;
using ::clang::ObjCMethodList;
using ::clang::UsingDirectiveDecl;
using ::clang::AtomicConstraint;
using ::clang::NormalizedConstraint;
using ::clang::ADLResult;
using ::clang::ASTConsumer;
using ::clang::ASTMutationListener;
using ::clang::ASTReader;
using ::clang::ASTWriter;
using ::clang::ArrayType;
using ::clang::BindingDecl;
using ::clang::BlockDecl;
using ::clang::CapturedDecl;
using ::clang::CXXBasePath;
using ::clang::CXXBasePaths;
using ::clang::CXXBindTemporaryExpr;
using ::clang::CXXConversionDecl;
using ::clang::CXXDeleteExpr;
using ::clang::CXXDestructorDecl;
using ::clang::CXXMemberCallExpr;
using ::clang::CXXMethodDecl;
using ::clang::CXXTemporary;
using ::clang::CXXTryStmt;
using ::clang::CallExpr;
using ::clang::ClassTemplateDecl;
using ::clang::ClassTemplatePartialSpecializationDecl;
using ::clang::ClassTemplateSpecializationDecl;
using ::clang::VarTemplatePartialSpecializationDecl;
using ::clang::CoroutineBodyStmt;
using ::clang::DeclAccessPair;
using ::clang::DeclRefExpr;
using ::clang::DeducedTemplateArgument;
using ::clang::DependentDiagnostic;
using ::clang::DesignatedInitExpr;
using ::clang::Designation;
using ::clang::EnableIfAttr;
using ::clang::EnumConstantDecl;
using ::clang::ExtVectorType;
using ::clang::FormatAttr;
using ::clang::FriendDecl;
using ::clang::FunctionProtoType;
using ::clang::ImplicitConversionSequence;
using ::clang::InitListExpr;
using ::clang::InitializationKind;
using ::clang::InitializationSequence;
using ::clang::InitializedEntity;
using ::clang::IntegerLiteral;
using ::clang::LabelStmt;
using ::clang::LambdaExpr;
using ::clang::LocalInstantiationScope;
using ::clang::MacroInfo;
using ::clang::ModuleLoader;
using ::clang::MultiLevelTemplateArgumentList;
using ::clang::ObjCCategoryDecl;
using ::clang::ObjCCategoryImplDecl;
using ::clang::ObjCCompatibleAliasDecl;
using ::clang::ObjCContainerDecl;
using ::clang::ObjCImplDecl;
using ::clang::ObjCImplementationDecl;
using ::clang::ObjCInterfaceDecl;
using ::clang::ObjCIvarDecl;
using ::clang::ObjCList;
using ::clang::ObjCMessageExpr;
using ::clang::ObjCPropertyDecl;
using ::clang::ObjCProtocolDecl;
using ::clang::OMPThreadPrivateDecl;
using ::clang::OMPRequiresDecl;
using ::clang::OMPDeclareReductionDecl;
using ::clang::OMPDeclareSimdDecl;
using ::clang::OMPClause;
using ::clang::OMPVarListLocTy;
using ::clang::OverloadCandidate;
using ::clang::OverloadCandidateParamOrder;
using ::clang::OverloadCandidateRewriteKind;
using ::clang::OverloadCandidateSet;
using ::clang::OverloadExpr;
using ::clang::ParenListExpr;
using ::clang::ParmVarDecl;
using ::clang::PseudoDestructorTypeStorage;
using ::clang::PseudoObjectExpr;
using ::clang::StandardConversionSequence;
using ::clang::StringLiteral;
using ::clang::SwitchStmt;
using ::clang::TemplateArgument;
using ::clang::TemplateArgumentList;
using ::clang::TemplateArgumentLoc;
using ::clang::TemplateDecl;
using ::clang::TemplateInstantiationCallback;
using ::clang::TemplatePartialOrderingContext;
using ::clang::TemplateTemplateParmDecl;
using ::clang::Token;
using ::clang::TypeAliasDecl;
using ::clang::TypedefDecl;
using ::clang::TypoCorrectionConsumer;
using ::clang::UnresolvedLookupExpr;
using ::clang::UnresolvedMemberExpr;
using ::clang::UnresolvedSetImpl;
using ::clang::UnresolvedSetIterator;
using ::clang::UsingDecl;
using ::clang::VarTemplateSpecializationDecl;
using ::clang::VisibilityAttr;
using ::clang::VisibleDeclConsumer;
using ::clang::IndirectFieldDecl;
using ::clang::DeductionFailureInfo;
using ::clang::TemplateSpecCandidateSet;
namespace threadSafety {
using ::clang::threadSafety::BeforeSet;
using ::clang::threadSafety::threadSafetyCleanup;
} // namespace threadSafety
using ::clang::FileNullability;
using ::clang::FileNullabilityMap;
using ::clang::PreferredTypeBuilder;
using ::clang::MakeDeductionFailureInfo;
using ::clang::CreateRISCVIntrinsicManager;
using ::clang::Designator;
using ::clang::EnterExpressionEvaluationContext;
using ::clang::HLSLExternalSemaSource;
using ::clang::OverloadFixItKind;
using ::clang::ConversionFixItGenerator;
using ::clang::DeducedPack;
using ::clang::TemplateSpecCandidate;
using ::clang::APValue;
using ::clang::OverloadingResult;
using ::clang::OverloadCandidateDisplayKind;
using ::clang::ImplicitConversionKind;
using ::clang::ImplicitConversionRank;
using ::clang::GetConversionRank;
using ::clang::NarrowingKind;
using ::clang::UserDefinedConversionSequence;
using ::clang::AmbiguousConversionSequence;
using ::clang::BadConversionSequence;
using ::clang::OverloadFailureKind;
using ::clang::ConversionSequenceList;
using ::clang::isBetterOverloadCandidate;
using ::clang::ConstructorInfo;
using ::clang::getConstructorInfo;
using ::clang::shouldEnforceArgLimit;
using ::clang::MultiplexExternalSemaSource;
using ::clang::getTemplateParamsRange;
using ::clang::ImplicitParamDecl;
using ::clang::ObjCIvarRefExpr;
using ::clang::ObjCPropertyRefExpr;
using ::clang::RecordDecl;
using ::clang::ReturnStmt;
using ::clang::SemaConsumer;
using ::clang::FTIHasSingleVoidParameter;
using ::clang::FTIHasNonVoidParameters;
using ::clang::DeclAttrsMatchCUDAMode;
using ::clang::getDLLAttr;
using ::clang::getDepthAndIndex;
using ::clang::getStackIndexOfNearestEnclosingCaptureCapableLambda;
using ::clang::EnumDecl;
using ::clang::TagDecl;
using ::clang::TypeSourceInfo;
using ::clang::TemplateSubstitutionKind;
using ::clang::TPOC;
using ::clang::TemplateDeclInstantiator;
using ::clang::initialize;
using ::clang::finalize;
using ::clang::atTemplateBegin;
using ::clang::atTemplateEnd;
} // namespace clang
namespace llvm {
using ::llvm::PointerLikeTypeTraits;
using ::llvm::SmallSetVector;
using ::llvm::raw_ostream;
using ::llvm::APSInt;
using ::llvm::DenseSet;
using ::llvm::SmallBitVector;
using ::llvm::InlineAsmIdentifierInfo;
using ::llvm::DenseMapInfo;
} // namespace llvm
}
