module;
#include "clang_basic.hpp"
export module clang.Basic;

export {
namespace clang {
using ::clang::CXXCtorType;
using ::clang::CXXDtorType;
using ::clang::LangAS;
using ::clang::LangASMap;
using ::clang::isTargetAddressSpace;
using ::clang::toTargetAddressSpace;
using ::clang::getLangASFromTargetAS;
using ::clang::isPtrSizeAddressSpace;
using ::clang::alignedAllocMinVersion;
using ::clang::isa;
using ::clang::isa_and_nonnull;
using ::clang::isa_and_present;
using ::clang::cast;
using ::clang::dyn_cast;
using ::clang::dyn_cast_or_null;
using ::clang::dyn_cast_if_present;
using ::clang::cast_or_null;
using ::clang::cast_if_present;
using ::clang::ArrayRef;
using ::clang::MutableArrayRef;
using ::clang::OwningArrayRef;
using ::clang::SaveAndRestore;
using ::clang::SmallString;
using ::clang::SmallVector;
using ::clang::SmallVectorImpl;
using ::clang::StringRef;
using ::clang::Twine;
using ::clang::VersionTuple;
using ::clang::Expected;
using ::clang::IntrusiveRefCntPtr;
using ::clang::IntrusiveRefCntPtrInfo;
using ::clang::RefCountedBase;
using ::clang::raw_ostream;
using ::clang::raw_pwrite_stream;
using ::clang::DiagnosticsEngine;
using ::clang::SourceLocation;
namespace diag {
using ::clang::diag::Group;
using ::clang::diag::CustomDiagInfo;
using ::clang::diag::kind;
using ::clang::diag::Severity;
using ::clang::diag::Flavor;
} // namespace diag
using ::clang::DiagnosticMapping;
using ::clang::DiagnosticIDs;
using ::clang::OverloadsShown;
using ::clang::DiagnosticLevelMask;
using ::clang::operator~;
using ::clang::operator|;
using ::clang::operator&;
using ::clang::operator<<;
using ::clang::DiagnosticOptions;
using ::clang::TextDiagnosticFormat;
using ::clang::SourceManager;
using ::clang::FileID;
using ::clang::operator==;
using ::clang::operator!=;
using ::clang::operator<;
using ::clang::operator>;
using ::clang::operator<=;
using ::clang::operator>=;
using ::clang::SourceRange;
using ::clang::CharSourceRange;
using ::clang::PresumedLoc;
using ::clang::FileEntry;
using ::clang::FullSourceLoc;
using ::clang::ExplicitSpecKind;
using ::clang::ConstexprSpecKind;
using ::clang::IfStatementKind;
using ::clang::TypeSpecifierWidth;
using ::clang::TypeSpecifierSign;
using ::clang::TypeSpecifiersPipe;
using ::clang::TypeSpecifierType;
using ::clang::WrittenBuiltinSpecs;
using ::clang::AccessSpecifier;
using ::clang::ExprValueKind;
using ::clang::ExprObjectKind;
using ::clang::NonOdrUseReason;
using ::clang::TemplateSpecializationKind;
using ::clang::isTemplateInstantiation;
using ::clang::isTemplateExplicitInstantiationOrSpecialization;
using ::clang::ThreadStorageClassSpecifier;
using ::clang::StorageClass;
using ::clang::isLegalForFunction;
using ::clang::isLegalForVariable;
using ::clang::InClassInitStyle;
using ::clang::CallingConv;
using ::clang::supportsVariadicCall;
using ::clang::StorageDuration;
using ::clang::NullabilityKind;
using ::clang::hasWeakerNullability;
using ::clang::getNullabilitySpelling;
using ::clang::ParameterABI;
using ::clang::MSInheritanceModel;
using ::clang::getParameterABISpelling;
using ::clang::getAccessSpelling;
using ::clang::DeclContext;
using ::clang::DiagnosticBuilder;
using ::clang::DiagnosticConsumer;
using ::clang::IdentifierInfo;
using ::clang::LangOptions;
using ::clang::Preprocessor;
using ::clang::StoredDiagnostic;
namespace tok {
using ::clang::tok::TokenKind;
using ::clang::tok::PPKeywordKind;
using ::clang::tok::ObjCKeywordKind;
using ::clang::tok::InterestingIdentifierKind;
using ::clang::tok::OnOffSwitch;
using ::clang::tok::getTokenName;
using ::clang::tok::getPunctuatorSpelling;
using ::clang::tok::getKeywordSpelling;
using ::clang::tok::getPPKeywordSpelling;
using ::clang::tok::isAnyIdentifier;
using ::clang::tok::isStringLiteral;
using ::clang::tok::isLiteral;
using ::clang::tok::isAnnotation;
using ::clang::tok::isPragmaAnnotation;
using ::clang::tok::isRegularKeywordAttribute;
} // namespace tok
using ::clang::FixItHint;
using ::clang::DiagnosticStorage;
using ::clang::DiagnosticErrorTrap;
using ::clang::StreamingDiagnostic;
using ::clang::AddFlagValue;
using ::clang::DiagNullabilityKind;
using ::clang::Diagnostic;
using ::clang::IgnoringDiagConsumer;
using ::clang::ForwardingDiagnosticConsumer;
using ::clang::TemplateDiffTypes;
using ::clang::ProcessWarningOptions;
using ::clang::StringSizerHelper;
namespace attr {
using ::clang::attr::Kind;
using ::clang::attr::SubjectMatchRule;
using ::clang::attr::getSubjectMatchRuleSpelling;
using ::clang::attr::ParsedSubjectMatchRuleSet;
} // namespace attr
using ::clang::ASTRecordWriter;
using ::clang::AttributeCommonInfo;
using ::clang::CommentOptions;
using ::clang::Language;
using ::clang::LangFeatures;
using ::clang::LangStandard;
using ::clang::getDefaultLanguageStandard;
using ::clang::ObjCRuntime;
using ::clang::SanitizerMask;
using ::clang::hash_value;
using ::clang::SanitizerKind;
using ::clang::SanitizerSet;
using ::clang::parseSanitizerValue;
using ::clang::serializeSanitizerSet;
using ::clang::expandSanitizerGroups;
using ::clang::getPPTransparentSanitizers;
using ::clang::AsanDtorKindToString;
using ::clang::AsanDtorKindFromString;
using ::clang::AsanDetectStackUseAfterReturnModeToString;
using ::clang::AsanDetectStackUseAfterReturnModeFromString;
using ::clang::TargetCXXABI;
using ::clang::Linkage;
using ::clang::LanguageLinkage;
using ::clang::GVALinkage;
using ::clang::isDiscardableGVALinkage;
using ::clang::isUniqueGVALinkage;
using ::clang::isExternallyVisible;
using ::clang::getFormalLinkage;
using ::clang::isExternalFormalLinkage;
using ::clang::minLinkage;
using ::clang::Visibility;
using ::clang::minVisibility;
using ::clang::LinkageInfo;
using ::clang::LangOptionsBase;
using ::clang::MSVtorDispMode;
using ::clang::ShaderStage;
using ::clang::FPOptionsOverride;
using ::clang::FPOptions;
using ::clang::TranslationUnitKind;
using ::clang::XRayInstrMask;
namespace XRayInstrKind {
using ::clang::XRayInstrKind::XRayInstrOrdinal;
} // namespace XRayInstrKind
using ::clang::XRayInstrSet;
using ::clang::parseXRayInstrValue;
using ::clang::serializeXRayInstrValue;
using ::clang::CodeGenOptionsBase;
using ::clang::CodeGenOptions;
using ::clang::TargetInfo;
using ::clang::OpenCLOptions;
using ::clang::TargetOptions;
using ::clang::MacroBuilder;
using ::clang::ParsedTargetAttr;
namespace Builtin {
using ::clang::Builtin::Info;
using ::clang::Builtin::ID;
using ::clang::Builtin::Context;
using ::clang::Builtin::evaluateRequiredTargetFeatures;
} // namespace Builtin
using ::clang::FloatModeKind;
using ::clang::TransferrableTargetInfo;
using ::clang::OpenCLTypeKind;
using ::clang::hasAttribute;
using ::clang::IdentifierTable;
using ::clang::LanguageID;
using ::clang::HeaderDesc;
using ::clang::BuiltinTemplateKind;
using ::clang::diagGroupFromCLWarningID;
using ::clang::CapturedRegionKind;
namespace charinfo {
using ::clang::charinfo::InfoTable;
} // namespace charinfo
using ::clang::isASCII;
using ::clang::isAsciiIdentifierStart;
using ::clang::isAsciiIdentifierContinue;
using ::clang::isHorizontalWhitespace;
using ::clang::isVerticalWhitespace;
using ::clang::isWhitespace;
using ::clang::isDigit;
using ::clang::isLowercase;
using ::clang::isUppercase;
using ::clang::isLetter;
using ::clang::isAlphanumeric;
using ::clang::isHexDigit;
using ::clang::isPunctuation;
using ::clang::isPrintable;
using ::clang::isPreprocessingNumberBody;
using ::clang::isRawStringDelimBody;
using ::clang::EscapeChar;
using ::clang::escapeCStyle;
using ::clang::toLowercase;
using ::clang::toUppercase;
using ::clang::isValidAsciiIdentifier;
using ::clang::CudaVersion;
using ::clang::CudaVersionToString;
using ::clang::CudaStringToVersion;
using ::clang::CudaArch;
using ::clang::CudaArchToString;
using ::clang::CudaArchToVirtualArchString;
using ::clang::StringToCudaArch;
using ::clang::MinVersionForCudaArch;
using ::clang::MaxVersionForCudaArch;
using ::clang::CudaFeature;
using ::clang::ToCudaVersion;
using ::clang::CudaFeatureEnabled;
namespace optional_detail {
using ::clang::optional_detail::OptionalStorage;
} // namespace optional_detail
using ::clang::CustomizableOptional;
using ::clang::DarwinSDKInfo;
using ::clang::parseDarwinSDKInfo;
using ::clang::PartialDiagnostic;
using ::clang::PartialDiagnosticAt;
using ::clang::DiagnosticError;
namespace FileMgr {
using ::clang::FileMgr::MapEntryOptionalStorage;
} // namespace FileMgr
using ::clang::DirectoryEntry;
using ::clang::DirectoryEntryRef;
using ::clang::OptionalDirectoryEntryRef;
using ::clang::OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr;
using ::clang::ExceptionSpecificationType;
using ::clang::isDynamicExceptionSpec;
using ::clang::isComputedNoexcept;
using ::clang::isNoexceptExceptionSpec;
using ::clang::isUnresolvedExceptionSpec;
using ::clang::isExplicitThrowExceptionSpec;
using ::clang::CanThrowResult;
using ::clang::mergeCanThrow;
using ::clang::ExpressionTrait;
using ::clang::getTraitName;
using ::clang::getTraitSpelling;
using ::clang::FileEntryRef;
using ::clang::OptionalFileEntryRef;
using ::clang::OptionalFileEntryRefDegradesToFileEntryPtr;
using ::clang::FileSystemOptions;
using ::clang::FileSystemStatCache;
using ::clang::FileManager;
using ::clang::MemorizeStatCalls;
namespace hlsl {
using ::clang::hlsl::getStageFromEnvironment;
} // namespace hlsl
using ::clang::HeaderIncludeFormatKind;
using ::clang::HeaderIncludeFilteringKind;
using ::clang::stringToHeaderIncludeFormatKind;
using ::clang::stringToHeaderIncludeFiltering;
using ::clang::headerIncludeFormatKindToString;
using ::clang::headerIncludeFilteringKindToString;
using ::clang::DeclarationName;
using ::clang::DeclarationNameTable;
using ::clang::MultiKeywordSelector;
using ::clang::ReservedIdentifierStatus;
using ::clang::ReservedLiteralSuffixIdStatus;
using ::clang::isReservedAtGlobalScope;
using ::clang::isReservedInAllContexts;
using ::clang::IdentifierLocPair;
using ::clang::PoisonIdentifierRAIIObject;
using ::clang::IdentifierIterator;
using ::clang::IdentifierInfoLookup;
using ::clang::ObjCMethodFamily;
using ::clang::ObjCInstanceTypeFamily;
using ::clang::ObjCStringFormatFamily;
using ::clang::Selector;
using ::clang::SelectorTable;
namespace detail {
using ::clang::detail::DeclarationNameExtra;
using ::clang::detail::SarifArtifactLocation;
using ::clang::detail::SarifArtifact;
} // namespace detail
using ::clang::ASTReader;
using ::clang::ASTWriter;
using ::clang::LineTableInfo;
namespace SrcMgr {
using ::clang::SrcMgr::CharacteristicKind;
using ::clang::SrcMgr::isSystem;
using ::clang::SrcMgr::isModuleMap;
using ::clang::SrcMgr::LineOffsetMapping;
using ::clang::SrcMgr::ContentCache;
using ::clang::SrcMgr::FileInfo;
using ::clang::SrcMgr::ExpansionInfo;
using ::clang::SrcMgr::SLocEntry;
} // namespace SrcMgr
using ::clang::ExternalSLocEntrySource;
using ::clang::InBeforeInTUCacheEntry;
using ::clang::ModuleBuildStack;
using ::clang::BeforeThanCompare;
using ::clang::SourceManagerForFile;
using ::clang::Indent;
using ::clang::JsonFormat;
using ::clang::printSourceLocationAsJson;
using ::clang::LambdaCaptureDefault;
using ::clang::LambdaCaptureKind;
using ::clang::quoteMakeTarget;
using ::clang::ModuleId;
using ::clang::ASTFileSignature;
using ::clang::Module;
using ::clang::VisibleModuleSet;
using ::clang::ASTSourceDescriptor;
using ::clang::SanitizerSpecialCaseList;
using ::clang::NoSanitizeList;
using ::clang::OpenMPDirectiveKind;
using ::clang::OpenMPClauseKind;
using ::clang::OpenMPScheduleClauseKind;
using ::clang::OpenMPScheduleClauseModifier;
using ::clang::OpenMPDeviceClauseModifier;
using ::clang::OpenMPDependClauseKind;
using ::clang::OpenMPLinearClauseKind;
using ::clang::OpenMPMapClauseKind;
using ::clang::OpenMPMapModifierKind;
using ::clang::OpenMPMotionModifierKind;
using ::clang::OpenMPDistScheduleClauseKind;
using ::clang::OpenMPDefaultmapClauseKind;
using ::clang::OpenMPDefaultmapClauseModifier;
using ::clang::OpenMPAtomicDefaultMemOrderClauseKind;
using ::clang::OpenMPAtClauseKind;
using ::clang::OpenMPSeverityClauseKind;
using ::clang::OpenMPDeviceType;
using ::clang::OpenMPLastprivateModifier;
using ::clang::OpenMPOrderClauseKind;
using ::clang::OpenMPOrderClauseModifier;
using ::clang::OpenMPScheduleTy;
using ::clang::OpenMPReductionClauseModifier;
using ::clang::OpenMPAdjustArgsOpKind;
using ::clang::OpenMPBindClauseKind;
using ::clang::OpenMPGrainsizeClauseModifier;
using ::clang::OpenMPNumTasksClauseModifier;
using ::clang::OpenMPDoacrossClauseModifier;
using ::clang::Expr;
using ::clang::OMPInteropInfo;
using ::clang::getOpenMPSimpleClauseType;
using ::clang::getOpenMPSimpleClauseTypeName;
using ::clang::isOpenMPLoopDirective;
using ::clang::isOpenMPWorksharingDirective;
using ::clang::isOpenMPTaskLoopDirective;
using ::clang::isOpenMPParallelDirective;
using ::clang::isOpenMPTargetExecutionDirective;
using ::clang::isOpenMPTargetDataManagementDirective;
using ::clang::isOpenMPNestingTeamsDirective;
using ::clang::isOpenMPTeamsDirective;
using ::clang::isOpenMPSimdDirective;
using ::clang::isOpenMPDistributeDirective;
using ::clang::isOpenMPNestingDistributeDirective;
using ::clang::isOpenMPGenericLoopDirective;
using ::clang::isOpenMPPrivate;
using ::clang::isOpenMPThreadPrivate;
using ::clang::isOpenMPTaskingDirective;
using ::clang::isOpenMPLoopBoundSharingDirective;
using ::clang::isOpenMPLoopTransformationDirective;
using ::clang::getOpenMPCaptureRegions;
using ::clang::isOpenMPCombinedParallelADirective;
using ::clang::OverloadedOperatorKind;
using ::clang::getOperatorSpelling;
using ::clang::getRewrittenOverloadedOperator;
using ::clang::isCompoundAssignmentOperator;
namespace prec {
using ::clang::prec::Level;
} // namespace prec
using ::clang::getBinOpPrecedence;
using ::clang::Decl;
using ::clang::ParsedAttr;
using ::clang::Sema;
using ::clang::Stmt;
using ::clang::ParsedAttrInfo;
using ::clang::ParsedAttrInfoRegistry;
using ::clang::getAttributePluginInstances;
namespace markup {
using ::clang::markup::FIDMap;
using ::clang::markup::AddFID;
using ::clang::markup::GetFID;
using ::clang::markup::Indent;
using ::clang::markup::EmitPlistHeader;
using ::clang::markup::EmitInteger;
using ::clang::markup::EmitString;
using ::clang::markup::EmitLocation;
using ::clang::markup::EmitRange;
} // namespace markup
using ::clang::PragmaMSCommentKind;
using ::clang::PragmaMSStructKind;
using ::clang::PragmaFloatControlKind;
using ::clang::PrettyStackTraceLoc;
using ::clang::ProfileSpecialCaseList;
using ::clang::ProfileList;
using ::clang::getClangRepositoryPath;
using ::clang::getLLVMRepositoryPath;
using ::clang::getClangRevision;
using ::clang::getLLVMRevision;
using ::clang::getClangFullRepositoryVersion;
using ::clang::getClangFullVersion;
using ::clang::getClangToolFullVersion;
using ::clang::getClangFullCPPVersion;
using ::clang::SarifDocumentWriter;
using ::clang::ThreadFlowImportance;
using ::clang::SarifResultLevel;
using ::clang::ThreadFlow;
using ::clang::SarifReportingConfiguration;
using ::clang::SarifRule;
using ::clang::SarifResult;
using ::clang::LineEntry;
using ::clang::noteBottomOfStack;
using ::clang::isStackNearlyExhausted;
using ::clang::runWithSufficientStackSpaceSlow;
using ::clang::runWithSufficientStackSpace;
using ::clang::SyncScope;
using ::clang::getAsString;
using ::clang::AtomicScopeModelKind;
using ::clang::AtomicScopeModel;
using ::clang::AtomicScopeOpenCLModel;
using ::clang::AtomicScopeHIPModel;
using ::clang::NeonTypeFlags;
using ::clang::SVETypeFlags;
using ::clang::getAllPossibleTargetIDFeatures;
using ::clang::getProcessorFromTargetID;
using ::clang::parseTargetID;
using ::clang::getCanonicalTargetID;
using ::clang::getConflictTargetIDCombination;
using ::clang::isCompatibleTargetID;
using ::clang::TemplateNameKind;
using ::clang::CXXMethodDecl;
using ::clang::ReturnAdjustment;
using ::clang::ThisAdjustment;
using ::clang::ThunkInfo;
using ::clang::TypeTrait;
using ::clang::ArrayTypeTrait;
using ::clang::UnaryExprOrTypeTrait;
using ::clang::getTypeTraitArity;
using ::clang::XRayFunctionFilter;
} // namespace clang
namespace llvm {
using ::llvm::StringRef;
using ::llvm::Twine;
using ::llvm::VersionTuple;
using ::llvm::ArrayRef;
using ::llvm::MutableArrayRef;
using ::llvm::OwningArrayRef;
using ::llvm::SmallString;
using ::llvm::SmallVector;
using ::llvm::SmallVectorImpl;
using ::llvm::Expected;
using ::llvm::SaveAndRestore;
using ::llvm::IntrusiveRefCntPtr;
using ::llvm::IntrusiveRefCntPtrInfo;
using ::llvm::RefCountedBase;
using ::llvm::raw_ostream;
using ::llvm::raw_pwrite_stream;
namespace opt {
using ::llvm::opt::ArgList;
} // namespace opt
using ::llvm::FoldingSetNodeID;
using ::llvm::FoldingSetTrait;
using ::llvm::DenseMapInfo;
using ::llvm::Error;
using ::llvm::Triple;
using ::llvm::hash_code;
using ::llvm::fltSemantics;
namespace json {
using ::llvm::json::Object;
} // namespace json
using ::llvm::PointerLikeTypeTraits;
using ::llvm::MemoryBuffer;
namespace vfs {
using ::llvm::vfs::File;
using ::llvm::vfs::FileSystem;
} // namespace vfs
using ::llvm::SpecialCaseList;
} // namespace llvm
}
