module;
#include "clang_tooling.hpp"
export module clang.Tooling;

export {
namespace clang {
namespace diff {
using ::clang::diff::DynTypedNode;
using ::clang::diff::NodeId;
using ::clang::diff::ChangeKind;
using ::clang::diff::Node;
using ::clang::diff::SyntaxTree;
using ::clang::diff::ComparisonOptions;
using ::clang::diff::ASTDiff;
} // namespace diff
namespace tooling {
using ::clang::tooling::CommandLineArguments;
using ::clang::tooling::ArgumentsAdjuster;
using ::clang::tooling::getClangSyntaxOnlyAdjuster;
using ::clang::tooling::getClangStripOutputAdjuster;
using ::clang::tooling::getClangStripDependencyFileAdjuster;
using ::clang::tooling::ArgumentInsertPosition;
using ::clang::tooling::getInsertArgumentAdjuster;
using ::clang::tooling::getStripPluginsAdjuster;
using ::clang::tooling::combineAdjusters;
using ::clang::tooling::CompileCommand;
using ::clang::tooling::CompilationDatabase;
using ::clang::tooling::FixedCompilationDatabase;
using ::clang::tooling::transferCompileCommand;
using ::clang::tooling::inferMissingCompileCommands;
using ::clang::tooling::inferTargetAndDriverMode;
using ::clang::tooling::expandResponseFiles;
using ::clang::tooling::CommonOptionsParser;
using ::clang::tooling::ArgumentsAdjustingCompilations;
using ::clang::tooling::getCC1Arguments;
using ::clang::tooling::ToolAction;
using ::clang::tooling::FrontendActionFactory;
using ::clang::tooling::newFrontendActionFactory;
using ::clang::tooling::SourceFileCallbacks;
using ::clang::tooling::runToolOnCode;
using ::clang::tooling::FileContentMappings;
using ::clang::tooling::runToolOnCodeWithArgs;
using ::clang::tooling::buildASTFromCode;
using ::clang::tooling::buildASTFromCodeWithArgs;
using ::clang::tooling::ToolInvocation;
using ::clang::tooling::ClangTool;
using ::clang::tooling::getAbsolutePath;
using ::clang::tooling::addTargetAndModeForProgramName;
using ::clang::tooling::addExpandedResponseFiles;
using ::clang::tooling::newInvocation;
using ::clang::tooling::ExecutorName;
using ::clang::tooling::ToolResults;
using ::clang::tooling::InMemoryToolResults;
using ::clang::tooling::ExecutionContext;
using ::clang::tooling::ToolExecutor;
using ::clang::tooling::ToolExecutorPlugin;
using ::clang::tooling::createExecutorFromCommandLineArgs;
namespace internal {
using ::clang::tooling::internal::createExecutorFromCommandLineArgsImpl;
using ::clang::tooling::internal::RangeLessThan;
using ::clang::tooling::internal::findError;
using ::clang::tooling::internal::ignoreError;
using ::clang::tooling::internal::invokeRuleAfterValidatingRequirements;
using ::clang::tooling::internal::visitRefactoringOptionsImpl;
using ::clang::tooling::internal::visitRefactoringOptions;
using ::clang::tooling::internal::HasBaseOf;
using ::clang::tooling::internal::AreBaseOf;
} // namespace internal
using ::clang::tooling::AllTUsToolExecutor;
using ::clang::tooling::ExecutorConcurrency;
using ::clang::tooling::Filter;
using ::clang::tooling::CompilationDatabasePlugin;
using ::clang::tooling::CompilationDatabasePluginRegistry;
using ::clang::tooling::Range;
using ::clang::tooling::Replacement;
using ::clang::tooling::replacement_error;
using ::clang::tooling::ReplacementError;
using ::clang::tooling::Replacements;
using ::clang::tooling::applyAllReplacements;
using ::clang::tooling::TranslationUnitReplacements;
using ::clang::tooling::calculateRangesAfterReplacements;
using ::clang::tooling::groupReplacementsByFile;
using ::clang::tooling::FileByteRange;
using ::clang::tooling::DiagnosticMessage;
using ::clang::tooling::Diagnostic;
using ::clang::tooling::TranslationUnitDiagnostics;
using ::clang::tooling::selectFirstFix;
namespace dependencies {
using ::clang::tooling::dependencies::DependencyDirectivesTy;
using ::clang::tooling::dependencies::CachedFileContents;
using ::clang::tooling::dependencies::CachedFileSystemEntry;
using ::clang::tooling::dependencies::DependencyScanningFilesystemSharedCache;
using ::clang::tooling::dependencies::DependencyScanningFilesystemLocalCache;
using ::clang::tooling::dependencies::EntryRef;
using ::clang::tooling::dependencies::DependencyScanningWorkerFilesystem;
using ::clang::tooling::dependencies::ScanningMode;
using ::clang::tooling::dependencies::ScanningOutputFormat;
using ::clang::tooling::dependencies::DependencyScanningService;
using ::clang::tooling::dependencies::DependencyActionController;
using ::clang::tooling::dependencies::DependencyConsumer;
using ::clang::tooling::dependencies::PrebuiltModuleDep;
using ::clang::tooling::dependencies::ModuleID;
using ::clang::tooling::dependencies::P1689ModuleInfo;
using ::clang::tooling::dependencies::ModuleOutputKind;
using ::clang::tooling::dependencies::ModuleDeps;
using ::clang::tooling::dependencies::ModuleDepCollector;
using ::clang::tooling::dependencies::ModuleDepCollectorPP;
using ::clang::tooling::dependencies::Command;
using ::clang::tooling::dependencies::DependencyScanningWorker;
using ::clang::tooling::dependencies::LookupModuleOutputCallback;
using ::clang::tooling::dependencies::ModuleDepsGraph;
using ::clang::tooling::dependencies::TranslationUnitDeps;
using ::clang::tooling::dependencies::P1689Rule;
using ::clang::tooling::dependencies::DependencyScanningTool;
using ::clang::tooling::dependencies::FullDependencyConsumer;
using ::clang::tooling::dependencies::CallbackActionController;
} // namespace dependencies
using ::clang::tooling::FileMatchTrieNode;
using ::clang::tooling::PathComparator;
using ::clang::tooling::FileMatchTrie;
using ::clang::tooling::JSONCommandLineSyntax;
using ::clang::tooling::JSONCompilationDatabase;
using ::clang::tooling::RefactoringTool;
using ::clang::tooling::formatAndApplyAllReplacements;
namespace fixit {
namespace internal {
using ::clang::tooling::fixit::internal::getText;
using ::clang::tooling::fixit::internal::getSourceRange;
} // namespace internal
using ::clang::tooling::fixit::getText;
using ::clang::tooling::fixit::createRemoval;
using ::clang::tooling::fixit::createReplacement;
} // namespace fixit
using ::clang::tooling::isSelfContainedHeader;
using ::clang::tooling::codeContainsImports;
using ::clang::tooling::parseIWYUPragma;
using ::clang::tooling::IncludeStyle;
using ::clang::tooling::IncludeCategoryManager;
using ::clang::tooling::IncludeDirective;
using ::clang::tooling::HeaderIncludes;
namespace stdlib {
using ::clang::tooling::stdlib::Symbol;
using ::clang::tooling::stdlib::Lang;
using ::clang::tooling::stdlib::Header;
using ::clang::tooling::stdlib::Recognizer;
} // namespace stdlib
using ::clang::tooling::LocationCall;
using ::clang::tooling::SharedLocationCall;
using ::clang::tooling::LocationCallFormatterCpp;
using ::clang::tooling::UniqueMultiMap;
using ::clang::tooling::SourceLocationMap;
using ::clang::tooling::SourceRangeMap;
using ::clang::tooling::NodeLocationAccessors;
namespace NodeIntrospection {
using ::clang::tooling::NodeIntrospection::hasIntrospectionSupport;
using ::clang::tooling::NodeIntrospection::GetLocations;
} // namespace NodeIntrospection
using ::clang::tooling::SourceSelectionKind;
using ::clang::tooling::SelectedASTNode;
using ::clang::tooling::findSelectedASTNodes;
using ::clang::tooling::CodeRangeASTSelection;
using ::clang::tooling::AtomicChange;
using ::clang::tooling::AtomicChanges;
using ::clang::tooling::ApplyChangesSpec;
using ::clang::tooling::applyAtomicChanges;
using ::clang::tooling::RefactoringOptionVisitor;
using ::clang::tooling::RefactoringResultConsumer;
using ::clang::tooling::RefactoringRuleContext;
using ::clang::tooling::RefactoringDescriptor;
using ::clang::tooling::RefactoringActionRuleBase;
using ::clang::tooling::RefactoringActionRule;
using ::clang::tooling::RefactoringOption;
using ::clang::tooling::createRefactoringOption;
using ::clang::tooling::RefactoringActionRuleRequirement;
using ::clang::tooling::SourceSelectionRequirement;
using ::clang::tooling::SourceRangeSelectionRequirement;
using ::clang::tooling::ASTSelectionRequirement;
using ::clang::tooling::CodeRangeASTSelectionRequirement;
using ::clang::tooling::RefactoringOptionsRequirement;
using ::clang::tooling::OptionRequirement;
using ::clang::tooling::SymbolName;
using ::clang::tooling::SymbolOccurrence;
using ::clang::tooling::SymbolOccurrences;
using ::clang::tooling::createRefactoringActionRule;
using ::clang::tooling::RefactoringActionRules;
using ::clang::tooling::SourceChangeRefactoringRule;
using ::clang::tooling::FindSymbolOccurrencesRefactoringRule;
using ::clang::tooling::ExtractFunction;
using ::clang::tooling::ExtractionSemicolonPolicy;
using ::clang::tooling::replaceNestedName;
using ::clang::tooling::RecursiveSymbolVisitor;
using ::clang::tooling::RefactoringAction;
using ::clang::tooling::createRefactoringActions;
namespace traits {
namespace internal {
using ::clang::tooling::traits::internal::HasHandle;
} // namespace internal
using ::clang::tooling::traits::IsValidOptionType;
} // namespace traits
using ::clang::tooling::OptionalRefactoringOption;
using ::clang::tooling::RequiredRefactoringOption;
using ::clang::tooling::RenamingAction;
using ::clang::tooling::RenameOccurrences;
using ::clang::tooling::QualifiedRenameRule;
using ::clang::tooling::createRenameReplacements;
using ::clang::tooling::QualifiedRenamingAction;
using ::clang::tooling::getNamedDeclAt;
using ::clang::tooling::getNamedDeclFor;
using ::clang::tooling::getUSRForDecl;
using ::clang::tooling::getCanonicalSymbolDeclaration;
using ::clang::tooling::getUSRsForDeclaration;
using ::clang::tooling::USRFindingAction;
using ::clang::tooling::createRenameAtomicChanges;
using ::clang::tooling::getOccurrencesOfUSRs;
using ::clang::tooling::RefactoringCallback;
using ::clang::tooling::ASTMatchRefactorer;
using ::clang::tooling::ReplaceStmtWithText;
using ::clang::tooling::ReplaceNodeWithTemplate;
using ::clang::tooling::ReplaceStmtWithStmt;
using ::clang::tooling::ReplaceIfStmtWithItsBody;
using ::clang::tooling::StandaloneToolExecutor;
using ::clang::tooling::ToolExecutorPluginRegistry;
using ::clang::tooling::maybeExtendRange;
using ::clang::tooling::getExtendedRange;
using ::clang::tooling::getAssociatedRange;
using ::clang::tooling::getText;
using ::clang::tooling::getExtendedText;
using ::clang::tooling::validateEditRange;
using ::clang::tooling::getFileRangeForEdit;
using ::clang::tooling::getFileRange;
using ::clang::tooling::reallyIgnoreImplicit;
using ::clang::tooling::mayEverNeedParens;
using ::clang::tooling::needParensBeforeDotOrArrow;
using ::clang::tooling::needParensAfterUnaryOperator;
using ::clang::tooling::isKnownPointerLikeType;
using ::clang::tooling::buildParens;
using ::clang::tooling::buildDereference;
using ::clang::tooling::buildAddressOf;
using ::clang::tooling::buildDot;
using ::clang::tooling::buildArrow;
using ::clang::tooling::PLTClass;
using ::clang::tooling::buildAccess;
namespace detail {
using ::clang::tooling::detail::TransformerImpl;
using ::clang::tooling::detail::type_identity;
using ::clang::tooling::detail::populateMetadata;
using ::clang::tooling::detail::WithMetadataImpl;
} // namespace detail
using ::clang::tooling::TransformerResult;
using ::clang::tooling::Transformer;
} // namespace tooling
using ::clang::CompilerInstance;
using ::clang::CompilerInvocation;
using ::clang::DiagnosticConsumer;
using ::clang::DiagnosticsEngine;
namespace driver {
using ::clang::driver::Compilation;
} // namespace driver
using ::clang::FileManager;
using ::clang::Rewriter;
using ::clang::SourceManager;
using ::clang::DependencyOutputOptions;
using ::clang::FileEntry;
using ::clang::HeaderSearch;
using ::clang::Decl;
using ::clang::NamespaceDecl;
using ::clang::DeclContext;
using ::clang::Stmt;
using ::clang::CXXCtorInitializer;
using ::clang::NestedNameSpecifierLoc;
using ::clang::TemplateArgumentLoc;
using ::clang::CXXBaseSpecifier;
using ::clang::DeclarationNameInfo;
using ::clang::ASTContext;
using ::clang::LangOptions;
using ::clang::SourceRange;
using ::clang::NamedDecl;
using ::clang::NestedNameSpecifier;
using ::clang::ASTConsumer;
using ::clang::SourceLocation;
namespace syntax {
using ::clang::syntax::TokenManager;
using ::clang::syntax::Arena;
using ::clang::syntax::Tree;
using ::clang::syntax::TreeBuilder;
using ::clang::syntax::FactoryImpl;
using ::clang::syntax::MutationsImpl;
using ::clang::syntax::NodeKind;
using ::clang::syntax::NodeRole;
using ::clang::syntax::Node;
using ::clang::syntax::Leaf;
using ::clang::syntax::List;
using ::clang::syntax::ArraySubscript;
using ::clang::syntax::Declaration;
using ::clang::syntax::EmptyDeclaration;
using ::clang::syntax::ExplicitTemplateInstantiation;
using ::clang::syntax::LinkageSpecificationDeclaration;
using ::clang::syntax::NamespaceAliasDefinition;
using ::clang::syntax::NamespaceDefinition;
using ::clang::syntax::SimpleDeclaration;
using ::clang::syntax::StaticAssertDeclaration;
using ::clang::syntax::TemplateDeclaration;
using ::clang::syntax::TypeAliasDeclaration;
using ::clang::syntax::UnknownDeclaration;
using ::clang::syntax::UsingDeclaration;
using ::clang::syntax::UsingNamespaceDirective;
using ::clang::syntax::Declarator;
using ::clang::syntax::ParenDeclarator;
using ::clang::syntax::SimpleDeclarator;
using ::clang::syntax::Expression;
using ::clang::syntax::BinaryOperatorExpression;
using ::clang::syntax::CallExpression;
using ::clang::syntax::IdExpression;
using ::clang::syntax::LiteralExpression;
using ::clang::syntax::BoolLiteralExpression;
using ::clang::syntax::CharacterLiteralExpression;
using ::clang::syntax::CxxNullPtrExpression;
using ::clang::syntax::FloatingLiteralExpression;
using ::clang::syntax::IntegerLiteralExpression;
using ::clang::syntax::StringLiteralExpression;
using ::clang::syntax::UserDefinedLiteralExpression;
using ::clang::syntax::CharUserDefinedLiteralExpression;
using ::clang::syntax::FloatUserDefinedLiteralExpression;
using ::clang::syntax::IntegerUserDefinedLiteralExpression;
using ::clang::syntax::StringUserDefinedLiteralExpression;
using ::clang::syntax::MemberExpression;
using ::clang::syntax::ParenExpression;
using ::clang::syntax::ThisExpression;
using ::clang::syntax::UnknownExpression;
using ::clang::syntax::CallArguments;
using ::clang::syntax::DeclaratorList;
using ::clang::syntax::NestedNameSpecifier;
using ::clang::syntax::ParameterDeclarationList;
using ::clang::syntax::MemberPointer;
using ::clang::syntax::NameSpecifier;
using ::clang::syntax::DecltypeNameSpecifier;
using ::clang::syntax::GlobalNameSpecifier;
using ::clang::syntax::IdentifierNameSpecifier;
using ::clang::syntax::SimpleTemplateNameSpecifier;
using ::clang::syntax::ParametersAndQualifiers;
using ::clang::syntax::Statement;
using ::clang::syntax::BreakStatement;
using ::clang::syntax::CaseStatement;
using ::clang::syntax::CompoundStatement;
using ::clang::syntax::ContinueStatement;
using ::clang::syntax::DeclarationStatement;
using ::clang::syntax::DefaultStatement;
using ::clang::syntax::EmptyStatement;
using ::clang::syntax::ExpressionStatement;
using ::clang::syntax::ForStatement;
using ::clang::syntax::IfStatement;
using ::clang::syntax::RangeBasedForStatement;
using ::clang::syntax::ReturnStatement;
using ::clang::syntax::SwitchStatement;
using ::clang::syntax::UnknownStatement;
using ::clang::syntax::WhileStatement;
using ::clang::syntax::TrailingReturnType;
using ::clang::syntax::TranslationUnit;
using ::clang::syntax::UnaryOperatorExpression;
using ::clang::syntax::PostfixUnaryOperatorExpression;
using ::clang::syntax::PrefixUnaryOperatorExpression;
using ::clang::syntax::UnqualifiedId;
using ::clang::syntax::FileRange;
using ::clang::syntax::Token;
using ::clang::syntax::TokenBuffer;
using ::clang::syntax::spelledTokensTouching;
using ::clang::syntax::spelledIdentifierTouching;
using ::clang::syntax::tokenize;
using ::clang::syntax::TokenCollector;
using ::clang::syntax::TokenBufferTokenManager;
using ::clang::syntax::buildSyntaxTree;
using ::clang::syntax::createLeaf;
using ::clang::syntax::createTree;
using ::clang::syntax::createEmptyStatement;
using ::clang::syntax::deepCopyExpandingMacros;
using ::clang::syntax::computeReplacements;
using ::clang::syntax::removeStatement;
} // namespace syntax
using ::clang::Preprocessor;
namespace transformer {
using ::clang::transformer::MatchConsumer;
using ::clang::transformer::notBoundError;
using ::clang::transformer::ifBound;
using ::clang::transformer::MatchComputation;
using ::clang::transformer::RangeSelector;
using ::clang::transformer::charRange;
using ::clang::transformer::enclose;
using ::clang::transformer::encloseNodes;
using ::clang::transformer::range;
using ::clang::transformer::before;
using ::clang::transformer::after;
using ::clang::transformer::between;
using ::clang::transformer::node;
using ::clang::transformer::statement;
using ::clang::transformer::member;
using ::clang::transformer::name;
using ::clang::transformer::callArgs;
using ::clang::transformer::statements;
using ::clang::transformer::initListElements;
using ::clang::transformer::elseBranch;
using ::clang::transformer::expansion;
using ::clang::transformer::parseRangeSelector;
using ::clang::transformer::EditKind;
using ::clang::transformer::Edit;
using ::clang::transformer::IncludeFormat;
using ::clang::transformer::EditGenerator;
using ::clang::transformer::Generator;
using ::clang::transformer::TextGenerator;
using ::clang::transformer::AnyGenerator;
using ::clang::transformer::ASTEdit;
using ::clang::transformer::edit;
using ::clang::transformer::editList;
using ::clang::transformer::noEdits;
using ::clang::transformer::noopEdit;
using ::clang::transformer::note;
using ::clang::transformer::flattenVector;
namespace detail {
using ::clang::transformer::detail::injectEdits;
using ::clang::transformer::detail::makeRule;
using ::clang::transformer::detail::makeEditGenerator;
using ::clang::transformer::detail::rewriteDescendants;
using ::clang::transformer::detail::buildMatcher;
using ::clang::transformer::detail::buildMatchers;
using ::clang::transformer::detail::getRuleMatchLoc;
using ::clang::transformer::detail::findSelectedCase;
using ::clang::transformer::detail::makeStencil;
} // namespace detail
using ::clang::transformer::flatten;
using ::clang::transformer::RootID;
using ::clang::transformer::changeTo;
using ::clang::transformer::change;
using ::clang::transformer::insertBefore;
using ::clang::transformer::insertAfter;
using ::clang::transformer::remove;
using ::clang::transformer::addInclude;
using ::clang::transformer::withMetadata;
using ::clang::transformer::shrinkTo;
using ::clang::transformer::RewriteRuleBase;
using ::clang::transformer::RewriteRuleWith;
using ::clang::transformer::RewriteRule;
using ::clang::transformer::makeRule;
using ::clang::transformer::applyFirst;
using ::clang::transformer::stripMetadata;
using ::clang::transformer::rewriteDescendants;
using ::clang::transformer::StencilInterface;
using ::clang::transformer::Stencil;
using ::clang::transformer::catVector;
using ::clang::transformer::cat;
using ::clang::transformer::expression;
using ::clang::transformer::deref;
using ::clang::transformer::maybeDeref;
using ::clang::transformer::addressOf;
using ::clang::transformer::maybeAddressOf;
using ::clang::transformer::access;
using ::clang::transformer::selectBound;
using ::clang::transformer::run;
using ::clang::transformer::describe;
using ::clang::transformer::dPrint;
} // namespace transformer
} // namespace clang
namespace llvm {
using ::llvm::DenseMapInfo;
namespace yaml {
using ::llvm::yaml::MappingTraits;
using ::llvm::yaml::ScalarEnumerationTraits;
} // namespace yaml
} // namespace llvm
}
